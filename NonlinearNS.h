// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __NONLINEARNS_H
#define __NONLINEARNS_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class nonlinearns_finite_element_0: public ufc::finite_element
{
public:

  nonlinearns_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~nonlinearns_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 3] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 4 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[4] = {};
    const std::size_t num_components[4] = { 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 4; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[4 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 4 * num_derivatives, 0.0);
    const std::size_t reference_offsets[4] = {};
    const std::size_t physical_offsets[4] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 4; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[4 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[4 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[4];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[4];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 4, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new nonlinearns_finite_element_0();
  }

};


class nonlinearns_finite_element_1: public ufc::finite_element
{
public:

  nonlinearns_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~nonlinearns_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 12 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 3, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[36];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[36];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[9] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new nonlinearns_finite_element_0();
    case 1:
        return new nonlinearns_finite_element_0();
    case 2:
        return new nonlinearns_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new nonlinearns_finite_element_1();
  }

};


class nonlinearns_finite_element_2: public ufc::finite_element
{
public:

  nonlinearns_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~nonlinearns_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 16;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 4 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 4;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 4 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 4;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 16 * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 12 + 3] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 13 + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 14 + 3] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[16 * 4 * ip + 4 * 15 + 3] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 16 * num_derivatives * 4, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[16] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3 };
    const std::size_t num_components[16] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 16; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[16 * (num_derivatives * 4) * ip + num_derivatives * 4 * i + 4 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 16 * num_derivatives * 4, 0.0);
    const std::size_t reference_offsets[16] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3 };
    const std::size_t physical_offsets[16] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 16; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[16 * (num_derivatives * 4) * ip + num_derivatives * 4 * d + 4 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[16 * (num_derivatives * 4) * ip + num_derivatives * 4 * d + 4 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[64];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[64];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 4; ++k)
        values[k] = physical_values[4 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 16; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 4; ++s)
            values[r * 4 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 4 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 4 * num_derivatives * 16, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[12] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 16; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 4 * num_derivatives; ++s)
            values[4 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[4];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 14:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 15:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[4];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[12] = vals[3];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[13] = vals[3];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[14] = vals[3];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[15] = vals[3];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[4] = dof_values[1];
    vertex_values[8] = dof_values[2];
    vertex_values[12] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[9] = dof_values[6];
    vertex_values[13] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[6] = dof_values[9];
    vertex_values[10] = dof_values[10];
    vertex_values[14] = dof_values[11];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[12];
    vertex_values[7] = dof_values[13];
    vertex_values[11] = dof_values[14];
    vertex_values[15] = dof_values[15];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 12] = coordinate_dofs[0];
    dof_coordinates[3 * 12 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 12 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 13] = coordinate_dofs[3];
    dof_coordinates[3 * 13 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 13 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 14] = coordinate_dofs[6];
    dof_coordinates[3 * 14 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 14 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 15] = coordinate_dofs[9];
    dof_coordinates[3 * 15 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 15 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[48] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 48, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new nonlinearns_finite_element_1();
    case 1:
        return new nonlinearns_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new nonlinearns_finite_element_2();
  }

};


class nonlinearns_finite_element_3: public ufc::finite_element
{
public:

  nonlinearns_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~nonlinearns_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[3] = { 0.25, 0.25, 0.25 };
    std::copy_n(dof_X, 3, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new nonlinearns_finite_element_3();
  }

};


class nonlinearns_dofmap_0: public ufc::dofmap
{
public:

  nonlinearns_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~nonlinearns_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 4;
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 2, 3, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new nonlinearns_dofmap_0();
  }

};


class nonlinearns_dofmap_1: public ufc::dofmap
{
public:

  nonlinearns_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~nonlinearns_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 6, 9, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 9;
            dofs[5] = 10;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 9;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 11;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 10;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new nonlinearns_dofmap_0();
    case 1:
        return new nonlinearns_dofmap_0();
    case 2:
        return new nonlinearns_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new nonlinearns_dofmap_1();
  }

};


class nonlinearns_dofmap_2: public ufc::dofmap
{
public:

  nonlinearns_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~nonlinearns_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 4 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 16;
  }

  std::size_t num_element_dofs() const final override
  {
    return 16;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 12;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 4, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 4, 8, 12, 16 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    dofs[15] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        dofs[9] = 13;
        dofs[10] = 14;
        dofs[11] = 15;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        dofs[9] = 12;
        dofs[10] = 14;
        dofs[11] = 15;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        dofs[9] = 12;
        dofs[10] = 13;
        dofs[11] = 15;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        dofs[9] = 12;
        dofs[10] = 13;
        dofs[11] = 14;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            dofs[3] = 12;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            dofs[3] = 13;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            dofs[3] = 14;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            dofs[3] = 15;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            dofs[3] = 12;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            dofs[3] = 13;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            dofs[3] = 14;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            dofs[3] = 15;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            dofs[6] = 14;
            dofs[7] = 15;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            dofs[6] = 13;
            dofs[7] = 15;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 9;
            dofs[5] = 10;
            dofs[6] = 13;
            dofs[7] = 14;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 11;
            dofs[6] = 12;
            dofs[7] = 15;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            dofs[6] = 12;
            dofs[7] = 14;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 12;
            dofs[7] = 13;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 9;
            dofs[7] = 10;
            dofs[8] = 11;
            dofs[9] = 13;
            dofs[10] = 14;
            dofs[11] = 15;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 10;
            dofs[8] = 11;
            dofs[9] = 12;
            dofs[10] = 14;
            dofs[11] = 15;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 11;
            dofs[9] = 12;
            dofs[10] = 13;
            dofs[11] = 15;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 10;
            dofs[9] = 12;
            dofs[10] = 13;
            dofs[11] = 14;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new nonlinearns_dofmap_1();
    case 1:
        return new nonlinearns_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new nonlinearns_dofmap_2();
  }

};


class nonlinearns_dofmap_3: public ufc::dofmap
{
public:

  nonlinearns_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~nonlinearns_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = {};
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new nonlinearns_dofmap_3();
  }

};


class nonlinearns_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  nonlinearns_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~nonlinearns_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new nonlinearns_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new nonlinearns_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new nonlinearns_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    nonlinearns_finite_element_0 xelement;
    double phi[4];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 4; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    nonlinearns_finite_element_0 xelement;
    double dphi[12];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 4; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[4] = { 0.25000000000000006, 0.24999999999999997, 0.25, 0.25 };
    const double dphi_Xm[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 4; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 4; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
  }

};


class nonlinearns_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  nonlinearns_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~nonlinearns_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 10
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           10
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights216[216] = { 0.0003873813194994919, 0.0006651185320093223, 0.0005858361910284347, 0.0003177012134009132, 9.737569218620557e-5, 1.134216942858236e-5, 0.0007261290454488172, 0.001246735091362301, 0.001098123871152249, 0.0005955167872389845, 0.0001825264019143804, 2.126039188243837e-5, 0.0007542546786186336, 0.001295025700392986, 0.001140658224196833, 0.0006185833300378595, 0.0001895963169056989, 2.208388460302278e-5, 0.0005285480847880828, 0.0009074963312758541, 0.0007993224793794701, 0.0004334756464118112, 0.0001328606543971471, 1.547540272867239e-5, 0.0002354768656004508, 0.0004043045425439875, 0.0003561113122256885, 0.000193120530504066, 5.919160689345546e-5, 6.894546462907932e-6, 4.681288071535159e-5, 8.037588012956056e-5, 7.079504960327859e-5, 3.83924269380752e-5, 1.176731151821484e-5, 1.370638174291803e-6, 0.0008157169605546229, 0.001400554027850867, 0.00123360754139111, 0.0006689901012644167, 0.0002050460351693296, 2.388344379727091e-5, 0.001529025144240894, 0.002625276202416827, 0.002312342442444397, 0.001253992175651298, 0.0003843496686493298, 4.476845261653239e-5, 0.001588249879270966, 0.002726962749596587, 0.002401907920794034, 0.001302563878093511, 0.000399236936769406, 4.650249849138737e-5, 0.001112974775829033, 0.001910934037860289, 0.001683150091555361, 0.0009127787504630996, 0.0002797674635477128, 3.258687975326573e-5, 0.0004958485694062517, 0.0008513525458804195, 0.0007498710510955289, 0.0004066579471798192, 0.0001246410067678467, 1.451799093562967e-5, 9.857486370605128e-5, 0.0001692491747560218, 0.0001490746191874023, 8.084373776904129e-5, 2.477867440262618e-5, 2.886181520053689e-6, 0.001057998858597558, 0.001816542544196867, 0.001600010094018067, 0.0008676916109106968, 0.0002659482169177954, 3.097723536324522e-5, 0.001983171780900475, 0.003405028165372252, 0.002999147722917846, 0.00162644931353061, 0.0004985080982708227, 5.806544924267081e-5, 0.00205998727584857, 0.003536917357400039, 0.003115315681224402, 0.001689447642888703, 0.0005178171398138199, 6.031453642004785e-5, 0.001443547332489404, 0.002478514152184317, 0.002183074475370925, 0.001183889661293119, 0.0003628631883600435, 4.226574075494212e-5, 0.0006431240808237643, 0.001104218822657781, 0.0009725955870955502, 0.0005274423173245576, 0.0001616615189724279, 1.883008271469836e-5, 0.0001278532853068322, 0.0002195190763088946, 0.0001933523324547521, 0.0001048557115034738, 3.213836478000209e-5, 3.743426827665786e-6, 0.001057998858597558, 0.001816542544196866, 0.001600010094018067, 0.0008676916109106963, 0.0002659482169177953, 3.09772353632452e-5, 0.001983171780900474, 0.00340502816537225, 0.002999147722917844, 0.00162644931353061, 0.0004985080982708225, 5.806544924267078e-5, 0.002059987275848568, 0.003536917357400037, 0.0031153156812244, 0.001689447642888702, 0.0005178171398138195, 6.03145364200478e-5, 0.001443547332489403, 0.002478514152184316, 0.002183074475370924, 0.001183889661293119, 0.0003628631883600433, 4.22657407549421e-5, 0.0006431240808237638, 0.001104218822657781, 0.0009725955870955495, 0.0005274423173245572, 0.0001616615189724277, 1.883008271469835e-5, 0.0001278532853068321, 0.0002195190763088945, 0.000193352332454752, 0.0001048557115034737, 3.213836478000207e-5, 3.743426827665784e-6, 0.0008157169605546229, 0.001400554027850867, 0.00123360754139111, 0.0006689901012644167, 0.0002050460351693296, 2.388344379727091e-5, 0.001529025144240894, 0.002625276202416827, 0.002312342442444397, 0.001253992175651298, 0.0003843496686493298, 4.476845261653239e-5, 0.001588249879270966, 0.002726962749596587, 0.002401907920794034, 0.001302563878093511, 0.000399236936769406, 4.650249849138737e-5, 0.001112974775829033, 0.001910934037860289, 0.001683150091555361, 0.0009127787504630996, 0.0002797674635477128, 3.258687975326573e-5, 0.0004958485694062517, 0.0008513525458804195, 0.0007498710510955289, 0.0004066579471798192, 0.0001246410067678467, 1.451799093562967e-5, 9.857486370605128e-5, 0.0001692491747560218, 0.0001490746191874023, 8.084373776904129e-5, 2.477867440262618e-5, 2.886181520053689e-6, 0.000387381319499493, 0.000665118532009324, 0.0005858361910284363, 0.000317701213400914, 9.737569218620582e-5, 1.134216942858239e-5, 0.0007261290454488191, 0.001246735091362304, 0.001098123871152252, 0.0005955167872389862, 0.0001825264019143809, 2.126039188243843e-5, 0.0007542546786186357, 0.00129502570039299, 0.001140658224196836, 0.0006185833300378611, 0.0001895963169056994, 2.208388460302284e-5, 0.0005285480847880842, 0.0009074963312758565, 0.0007993224793794723, 0.0004334756464118124, 0.0001328606543971475, 1.547540272867243e-5, 0.0002354768656004515, 0.0004043045425439885, 0.0003561113122256895, 0.0001931205305040666, 5.919160689345562e-5, 6.894546462907952e-6, 4.681288071535172e-5, 8.037588012956077e-5, 7.079504960327879e-5, 3.83924269380753e-5, 1.176731151821487e-5, 1.370638174291807e-6 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE42_C0_D001_Q216[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE42_C0_Q216[1][216][4] =
        { { { 0.9136121114247775, 0.03192633532428044, 0.02855699815727474, 0.02590455509366722 },
            { 0.8145133057013245, 0.028463310193376, 0.02545944244731432, 0.1315639416579851 },
            { 0.6542501389464598, 0.02286288574851228, 0.02045005728213695, 0.3024369180228911 },
            { 0.4604787770508101, 0.01609151155287547, 0.01439329823156228, 0.5090364131647521 },
            { 0.2666650038791993, 0.009318655287768495, 0.008335213521318311, 0.715681127311714 },
            { 0.1061659414857326, 0.003709987428478295, 0.003318454908227207, 0.8868056161775619 },
            { 0.8018325756224064, 0.02802017985874753, 0.1442426894251789, 0.02590455509366722 },
            { 0.714858410502789, 0.02498085241832221, 0.1285967954209037, 0.1315639416579851 },
            { 0.574203283267168, 0.02006563435033861, 0.1032941643596024, 0.3024369180228911 },
            { 0.4041396553361117, 0.0141227310723564, 0.0727012004267798, 0.5090364131647521 },
            { 0.2340388051066487, 0.00817852705463391, 0.04210154052700347, 0.715681127311714 },
            { 0.09317664382987065, 0.003256074145803883, 0.01676166584676358, 0.8868056161775619 },
            { 0.6240332421066928, 0.02180695099359625, 0.3282552518060438, 0.02590455509366722 },
            { 0.5563448344650003, 0.01944156772764426, 0.2926496561493703, 0.1315639416579851 },
            { 0.4468787467351004, 0.01561625611038507, 0.2350680791316236, 0.3024369180228911 },
            { 0.3145252351309283, 0.01099113945531895, 0.1654472122490007, 0.5090364131647521 },
            { 0.1821427549462075, 0.006365010488129579, 0.09581110725394899, 0.715681127311714 },
            { 0.07251554115600831, 0.002534068292459434, 0.03814477437397034, 0.8868056161775619 },
            { 0.4153805182746055, 0.01451554499745743, 0.5441993816342698, 0.02590455509366722 },
            { 0.3703245117188173, 0.01294105495328567, 0.485170491669912, 0.1315639416579851 },
            { 0.2974596750616619, 0.01039478046833229, 0.3897086264471148, 0.3024369180228911 },
            { 0.2093600891165185, 0.007316124999953588, 0.2742873727187758, 0.5090364131647521 },
            { 0.1212412205704014, 0.004236795697705031, 0.1588408564201798, 0.715681127311714 },
            { 0.04826913221266544, 0.001686773283281394, 0.06323847832649124, 0.8868056161775618 },
            { 0.2171982141813462, 0.007590029653803968, 0.7493072010711825, 0.02590455509366722 },
            { 0.193638890304749, 0.006766744952680009, 0.6680304230845858, 0.1315639416579851 },
            { 0.1555386142872611, 0.005435324131008832, 0.536589143558839, 0.3024369180228911 },
            { 0.1094722440663277, 0.003825526751514432, 0.3776658160174057, 0.5090364131647521 },
            { 0.06339579117104634, 0.002215377031198156, 0.2187077044860416, 0.715681127311714 },
            { 0.02523943433895798, 0.0008819964556337926, 0.08707295302784633, 0.8868056161775619 },
            { 0.06875909033775085, 0.002402798460379524, 0.9029335561082024, 0.02590455509366722 },
            { 0.06130084449151772, 0.002142168752388408, 0.8049930450981088, 0.1315639416579851 },
            { 0.04923932579784932, 0.001720676868120814, 0.6466030793111389, 0.3024369180228911 },
            { 0.03465595676098979, 0.001211058481711272, 0.4550965715925468, 0.5090364131647521 },
            { 0.02006939582166018, 0.0007013285537106443, 0.2635481483129153, 0.715681127311714 },
            { 0.007990123456250695, 0.0002792162642730904, 0.1049250441019143, 0.8868056161775619 },
            { 0.7853686715021336, 0.1601697752469243, 0.02855699815727474, 0.02590455509366722 },
            { 0.7001803334479217, 0.1427962824467787, 0.02545944244731432, 0.1315639416579851 },
            { 0.5624132561609256, 0.1146997685340465, 0.02045005728213695, 0.3024369180228911 },
            { 0.3958415183696897, 0.08072877023399597, 0.01439329823156228, 0.5090364131647521 },
            { 0.2292333225597366, 0.04675033660723111, 0.008335213521318311, 0.715681127311714 },
            { 0.09126346222949364, 0.01861246668471729, 0.003318454908227207, 0.8868056161775619 },
            { 0.6892795933950934, 0.1405731620860605, 0.1442426894251789, 0.02590455509366722 },
            { 0.6145139640204164, 0.1253252989006949, 0.1285967954209037, 0.1315639416579851 },
            { 0.4936025520156745, 0.1006663656018319, 0.1032941643596024, 0.3024369180228911 },
            { 0.3474107011537635, 0.07085168525470456, 0.0727012004267798, 0.5090364131647521 },
            { 0.2011868528755699, 0.04103047928571269, 0.04210154052700347, 0.715681127311714 },
            { 0.08009746813182231, 0.01633524984385222, 0.01676166584676358, 0.8868056161775619 },
            { 0.5364378954676925, 0.1094022976325966, 0.3282552518060438, 0.02590455509366722 },
            { 0.4782508879610305, 0.09753551423161408, 0.2926496561493703, 0.1315639416579851 },
            { 0.3841505199603311, 0.07834448288515439, 0.2350680791316236, 0.3024369180228911 },
            { 0.2703754284555713, 0.05514094613067599, 0.1654472122490007, 0.5090364131647521 },
            { 0.1565754346806508, 0.03193233075368632, 0.09581110725394899, 0.715681127311714 },
            { 0.06233655783321086, 0.01271305161525684, 0.03814477437397032, 0.8868056161775618 },
            { 0.3570736877562231, 0.07282237551583987, 0.5441993816342698, 0.02590455509366722 },
            { 0.3183421784325047, 0.06492338823959824, 0.485170491669912, 0.1315639416579851 },
            { 0.2557053555959438, 0.05214909993405035, 0.3897086264471148, 0.3024369180228911 },
            { 0.1799722803571288, 0.03670393375934332, 0.2742873727187758, 0.5090364131647521 },
            { 0.1042226292098725, 0.02125538705823389, 0.1588408564201798, 0.715681127311714 },
            { 0.0414936095596443, 0.008462295936302587, 0.06323847832649125, 0.8868056161775619 },
            { 0.1867101703131095, 0.03807807352204069, 0.7493072010711825, 0.02590455509366722 },
            { 0.1664578611951879, 0.03394777406224117, 0.6680304230845858, 0.1315639416579851 },
            { 0.1337057087384362, 0.02726822967983372, 0.536589143558839, 0.3024369180228911 },
            { 0.09410566017415149, 0.01919211064369059, 0.3776658160174057, 0.509036413164752 },
            { 0.05449694423729268, 0.0111142239649518, 0.2187077044860416, 0.715681127311714 },
            { 0.02169658301195238, 0.004424847782639395, 0.08707295302784633, 0.8868056161775619 },
            { 0.05910739881506133, 0.01205448998306904, 0.9029335561082024, 0.02590455509366722 },
            { 0.05269606455324025, 0.01074694869066587, 0.8049930450981088, 0.1315639416579851 },
            { 0.04232761738152777, 0.008632385284442363, 0.6466030793111389, 0.3024369180228911 },
            { 0.0297913111928518, 0.006075704049849254, 0.4550965715925468, 0.5090364131647521 },
            { 0.01725226114803486, 0.003518463227335965, 0.2635481483129153, 0.715681127311714 },
            { 0.006868552381806202, 0.001400787338717584, 0.1049250441019143, 0.8868056161775619 },
            { 0.5855810306613443, 0.3599574160877137, 0.02855699815727474, 0.02590455509366722 },
            { 0.522063504933331, 0.3209131109613696, 0.02545944244731432, 0.1315639416579851 },
            { 0.4193425917670089, 0.257770432927963, 0.02045005728213695, 0.3024369180228911 },
            { 0.2951445514908657, 0.1814257371128199, 0.01439329823156228, 0.5090364131647521 },
            { 0.1709193276448261, 0.1050643315221417, 0.008335213521318311, 0.715681127311714 },
            { 0.0680472168209276, 0.04182871209328333, 0.003318454908227207, 0.8868056161775619 },
            { 0.5139357722814826, 0.3159169831996713, 0.1442426894251789, 0.02590455509366722 },
            { 0.4581895528358697, 0.2816497100852415, 0.1285967954209037, 0.1315639416579851 },
            { 0.3680364415269692, 0.2262324760905373, 0.1032941643596024, 0.3024369180228911 },
            { 0.2590339083112362, 0.1592284780972319, 0.0727012004267798, 0.5090364131647521 },
            { 0.1500075174084257, 0.0922098147528569, 0.04210154052700347, 0.715681127311714 },
            { 0.0597217073254103, 0.03671101065026429, 0.01676166584676358, 0.8868056161775619 },
            { 0.3999750271588474, 0.2458651659414416, 0.3282552518060438, 0.02590455509366722 },
            { 0.3565900424208129, 0.2191963597718317, 0.2926496561493703, 0.1315639416579851 },
            { 0.2864275919960105, 0.1760674108494749, 0.2350680791316236, 0.3024369180228911 },
            { 0.2015954134733854, 0.1239209611128619, 0.1654472122490007, 0.5090364131647521 },
            { 0.1167446674963204, 0.0717630979380167, 0.09581110725394899, 0.715681127311714 },
            { 0.04647894308546145, 0.0285706663630063, 0.03814477437397034, 0.8868056161775619 },
            { 0.2662387559952066, 0.1636573072768564, 0.5441993816342698, 0.02590455509366722 },
            { 0.2373600421225577, 0.1459055245495452, 0.485170491669912, 0.1315639416579851 },
            { 0.1906572175703236, 0.1171972379596706, 0.3897086264471148, 0.3024369180228911 },
            { 0.1341896579862666, 0.08248655613020547, 0.2742873727187758, 0.5090364131647521 },
            { 0.07770973919066805, 0.04776827707743831, 0.1588408564201798, 0.715681127311714 },
            { 0.03093817150271941, 0.01901773399322747, 0.06323847832649125, 0.8868056161775619 },
            { 0.1392135158100825, 0.08557472802506765, 0.7493072010711824, 0.02590455509366722 },
            { 0.1241131324145214, 0.07629250284290764, 0.6680304230845858, 0.1315639416579851 },
            { 0.09969270429212213, 0.06128123412614783, 0.536589143558839, 0.3024369180228911 },
            { 0.07016639633771811, 0.04313137448012405, 0.3776658160174057, 0.5090364131647521 },
            { 0.04063362587831588, 0.02497754232392861, 0.2187077044860416, 0.715681127311714 },
            { 0.01617725267506287, 0.0099441781195289, 0.08707295302784633, 0.8868056161775619 },
            { 0.04407124039164162, 0.02709064840648875, 0.9029335561082024, 0.02590455509366722 },
            { 0.03929086671341629, 0.02415214653048984, 0.8049930450981088, 0.1315639416579851 },
            { 0.03156001851246074, 0.01939998415350939, 0.6466030793111389, 0.3024369180228911 },
            { 0.02221278661357404, 0.01365422862912708, 0.4550965715925468, 0.5090364131647521 },
            { 0.01286350886009014, 0.007907215515280685, 0.2635481483129153, 0.715681127311714 },
            { 0.005121281417040301, 0.003148058303483486, 0.1049250441019143, 0.8868056161775619 },
            { 0.3599574160877137, 0.5855810306613443, 0.02855699815727474, 0.02590455509366722 },
            { 0.3209131109613697, 0.5220635049333308, 0.02545944244731432, 0.1315639416579851 },
            { 0.2577704329279631, 0.4193425917670089, 0.02045005728213695, 0.3024369180228911 },
            { 0.18142573711282, 0.2951445514908657, 0.01439329823156228, 0.5090364131647521 },
            { 0.1050643315221418, 0.170919327644826, 0.008335213521318311, 0.715681127311714 },
            { 0.04182871209328335, 0.06804721682092764, 0.003318454908227207, 0.8868056161775619 },
            { 0.3159169831996714, 0.5139357722814825, 0.1442426894251789, 0.02590455509366722 },
            { 0.2816497100852417, 0.4581895528358694, 0.1285967954209037, 0.1315639416579851 },
            { 0.2262324760905374, 0.3680364415269691, 0.1032941643596024, 0.3024369180228911 },
            { 0.159228478097232, 0.2590339083112362, 0.0727012004267798, 0.5090364131647521 },
            { 0.09220981475285712, 0.1500075174084255, 0.04210154052700347, 0.715681127311714 },
            { 0.03671101065026428, 0.05972170732541028, 0.01676166584676358, 0.8868056161775619 },
            { 0.2458651659414416, 0.3999750271588474, 0.3282552518060438, 0.02590455509366722 },
            { 0.2191963597718317, 0.3565900424208128, 0.2926496561493703, 0.1315639416579851 },
            { 0.1760674108494749, 0.2864275919960105, 0.2350680791316236, 0.3024369180228911 },
            { 0.1239209611128619, 0.2015954134733854, 0.1654472122490007, 0.5090364131647521 },
            { 0.0717630979380167, 0.1167446674963204, 0.09581110725394899, 0.715681127311714 },
            { 0.02857066636300629, 0.04647894308546148, 0.03814477437397034, 0.8868056161775619 },
            { 0.1636573072768563, 0.2662387559952066, 0.5441993816342698, 0.02590455509366722 },
            { 0.1459055245495453, 0.2373600421225576, 0.485170491669912, 0.1315639416579851 },
            { 0.1171972379596706, 0.1906572175703235, 0.3897086264471148, 0.3024369180228911 },
            { 0.08248655613020549, 0.1341896579862666, 0.2742873727187758, 0.5090364131647521 },
            { 0.04776827707743837, 0.07770973919066797, 0.1588408564201798, 0.715681127311714 },
            { 0.01901773399322746, 0.0309381715027194, 0.06323847832649125, 0.8868056161775619 },
            { 0.0855747280250678, 0.1392135158100824, 0.7493072010711825, 0.02590455509366722 },
            { 0.0762925028429077, 0.1241131324145213, 0.6680304230845858, 0.1315639416579851 },
            { 0.06128123412614789, 0.0996927042921221, 0.536589143558839, 0.3024369180228911 },
            { 0.04313137448012407, 0.07016639633771807, 0.3776658160174057, 0.5090364131647521 },
            { 0.02497754232392866, 0.04063362587831585, 0.2187077044860416, 0.715681127311714 },
            { 0.009944178119528888, 0.01617725267506291, 0.08707295302784633, 0.8868056161775619 },
            { 0.02709064840648881, 0.04407124039164159, 0.9029335561082024, 0.02590455509366722 },
            { 0.02415214653048995, 0.03929086671341615, 0.8049930450981088, 0.1315639416579851 },
            { 0.01939998415350944, 0.03156001851246066, 0.6466030793111389, 0.3024369180228911 },
            { 0.01365422862912707, 0.02221278661357401, 0.4550965715925468, 0.5090364131647521 },
            { 0.007907215515280739, 0.01286350886009006, 0.2635481483129153, 0.715681127311714 },
            { 0.003148058303483474, 0.00512128141704034, 0.1049250441019143, 0.8868056161775619 },
            { 0.1601697752469242, 0.7853686715021339, 0.02855699815727474, 0.02590455509366722 },
            { 0.1427962824467789, 0.7001803334479217, 0.02545944244731432, 0.1315639416579851 },
            { 0.1146997685340464, 0.5624132561609256, 0.02045005728213695, 0.3024369180228911 },
            { 0.08072877023399593, 0.3958415183696897, 0.01439329823156228, 0.5090364131647521 },
            { 0.04675033660723119, 0.2292333225597366, 0.008335213521318311, 0.715681127311714 },
            { 0.01861246668471728, 0.09126346222949362, 0.003318454908227207, 0.8868056161775619 },
            { 0.1405731620860606, 0.6892795933950934, 0.1442426894251789, 0.02590455509366722 },
            { 0.125325298900695, 0.6145139640204162, 0.1285967954209037, 0.1315639416579851 },
            { 0.100666365601832, 0.4936025520156745, 0.1032941643596024, 0.3024369180228911 },
            { 0.07085168525470457, 0.3474107011537635, 0.0727012004267798, 0.5090364131647521 },
            { 0.04103047928571286, 0.2011868528755698, 0.04210154052700347, 0.715681127311714 },
            { 0.01633524984385221, 0.08009746813182235, 0.01676166584676358, 0.8868056161775619 },
            { 0.1094022976325965, 0.5364378954676925, 0.3282552518060438, 0.02590455509366722 },
            { 0.09753551423161412, 0.4782508879610304, 0.2926496561493703, 0.1315639416579851 },
            { 0.07834448288515433, 0.3841505199603311, 0.2350680791316236, 0.3024369180228911 },
            { 0.05514094613067599, 0.2703754284555713, 0.1654472122490007, 0.5090364131647521 },
            { 0.03193233075368632, 0.1565754346806508, 0.09581110725394899, 0.715681127311714 },
            { 0.01271305161525685, 0.06233655783321092, 0.03814477437397034, 0.8868056161775619 },
            { 0.07282237551583982, 0.3570736877562232, 0.5441993816342698, 0.02590455509366722 },
            { 0.06492338823959826, 0.3183421784325046, 0.485170491669912, 0.1315639416579851 },
            { 0.05214909993405042, 0.2557053555959437, 0.3897086264471148, 0.3024369180228911 },
            { 0.03670393375934321, 0.1799722803571289, 0.2742873727187758, 0.5090364131647521 },
            { 0.02125538705823394, 0.1042226292098724, 0.1588408564201798, 0.715681127311714 },
            { 0.008462295936302575, 0.04149360955964428, 0.06323847832649125, 0.8868056161775619 },
            { 0.03807807352204071, 0.1867101703131095, 0.7493072010711825, 0.02590455509366722 },
            { 0.03394777406224123, 0.1664578611951879, 0.6680304230845858, 0.1315639416579851 },
            { 0.02726822967983372, 0.1337057087384362, 0.536589143558839, 0.3024369180228911 },
            { 0.01919211064369064, 0.09410566017415148, 0.3776658160174057, 0.5090364131647521 },
            { 0.01111422396495186, 0.05449694423729266, 0.2187077044860416, 0.715681127311714 },
            { 0.004424847782639384, 0.02169658301195242, 0.08707295302784633, 0.8868056161775619 },
            { 0.0120544899830691, 0.0591073988150613, 0.9029335561082024, 0.02590455509366722 },
            { 0.01074694869066598, 0.05269606455324011, 0.8049930450981088, 0.1315639416579851 },
            { 0.008632385284442471, 0.04232761738152763, 0.6466030793111389, 0.3024369180228911 },
            { 0.006075704049849307, 0.02979131119285178, 0.4550965715925468, 0.5090364131647521 },
            { 0.003518463227336075, 0.01725226114803472, 0.2635481483129153, 0.715681127311714 },
            { 0.001400787338717573, 0.006868552381806241, 0.1049250441019143, 0.8868056161775619 },
            { 0.03192633532428071, 0.9136121114247773, 0.02855699815727474, 0.02590455509366722 },
            { 0.02846331019337627, 0.8145133057013243, 0.02545944244731432, 0.1315639416579851 },
            { 0.02286288574851253, 0.6542501389464594, 0.02045005728213695, 0.3024369180228911 },
            { 0.01609151155287555, 0.4604787770508101, 0.01439329823156228, 0.5090364131647521 },
            { 0.009318655287768632, 0.2666650038791991, 0.008335213521318311, 0.715681127311714 },
            { 0.003709987428478338, 0.1061659414857326, 0.003318454908227207, 0.8868056161775619 },
            { 0.02802017985874786, 0.8018325756224061, 0.1442426894251789, 0.02590455509366722 },
            { 0.02498085241832234, 0.7148584105027886, 0.1285967954209036, 0.1315639416579851 },
            { 0.02006563435033886, 0.5742032832671676, 0.1032941643596024, 0.3024369180228911 },
            { 0.01412273107235652, 0.4041396553361116, 0.0727012004267798, 0.5090364131647521 },
            { 0.00817852705463413, 0.2340388051066485, 0.04210154052700347, 0.715681127311714 },
            { 0.003256074145803871, 0.09317664382987069, 0.01676166584676358, 0.8868056161775619 },
            { 0.02180695099359635, 0.6240332421066928, 0.3282552518060438, 0.02590455509366722 },
            { 0.01944156772764435, 0.5563448344650003, 0.2926496561493703, 0.1315639416579851 },
            { 0.01561625611038515, 0.4468787467351003, 0.2350680791316236, 0.3024369180228911 },
            { 0.01099113945531905, 0.3145252351309282, 0.1654472122490007, 0.5090364131647521 },
            { 0.006365010488129634, 0.1821427549462075, 0.09581110725394899, 0.715681127311714 },
            { 0.002534068292459423, 0.07251554115600835, 0.03814477437397034, 0.8868056161775619 },
            { 0.01451554499745748, 0.4153805182746055, 0.5441993816342698, 0.02590455509366722 },
            { 0.01294105495328574, 0.3703245117188171, 0.485170491669912, 0.1315639416579851 },
            { 0.01039478046833236, 0.2974596750616618, 0.3897086264471148, 0.3024369180228911 },
            { 0.007316124999953586, 0.2093600891165185, 0.2742873727187758, 0.5090364131647521 },
            { 0.004236795697705085, 0.1212412205704013, 0.1588408564201798, 0.715681127311714 },
            { 0.001686773283281349, 0.0482691322126655, 0.06323847832649125, 0.8868056161775619 },
            { 0.007590029653804038, 0.2171982141813462, 0.7493072010711825, 0.02590455509366722 },
            { 0.006766744952680072, 0.193638890304749, 0.6680304230845858, 0.1315639416579851 },
            { 0.005435324131008892, 0.155538614287261, 0.536589143558839, 0.3024369180228911 },
            { 0.00382552675151443, 0.1094722440663277, 0.3776658160174057, 0.5090364131647521 },
            { 0.002215377031198266, 0.06339579117104625, 0.2187077044860416, 0.715681127311714 },
            { 0.0008819964556337809, 0.02523943433895802, 0.08707295302784633, 0.8868056161775619 },
            { 0.002402798460379635, 0.06875909033775077, 0.9029335561082024, 0.02590455509366722 },
            { 0.002142168752388519, 0.06130084449151758, 0.8049930450981088, 0.1315639416579851 },
            { 0.001720676868120866, 0.04923932579784924, 0.6466030793111389, 0.3024369180228911 },
            { 0.001211058481711325, 0.03465595676098976, 0.4550965715925468, 0.5090364131647521 },
            { 0.0007013285537106986, 0.0200693958216601, 0.2635481483129153, 0.715681127311714 },
            { 0.0002792162642730787, 0.007990123456250735, 0.1049250441019143, 0.8868056161775619 } } };
    // Unstructured piecewise computations
    double w0_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c3 += w[0][ic + 12] * FE42_C0_D001_Q216[0][0][ic];
    const double J_c4 = coordinate_dofs[1] * FE42_C0_D001_Q216[0][0][0] + coordinate_dofs[7] * FE42_C0_D001_Q216[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE42_C0_D001_Q216[0][0][0] + coordinate_dofs[11] * FE42_C0_D001_Q216[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE42_C0_D001_Q216[0][0][0] + coordinate_dofs[10] * FE42_C0_D001_Q216[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE42_C0_D001_Q216[0][0][0] + coordinate_dofs[8] * FE42_C0_D001_Q216[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE42_C0_D001_Q216[0][0][0] + coordinate_dofs[3] * FE42_C0_D001_Q216[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE42_C0_D001_Q216[0][0][0] + coordinate_dofs[6] * FE42_C0_D001_Q216[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE42_C0_D001_Q216[0][0][0] + coordinate_dofs[5] * FE42_C0_D001_Q216[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE42_C0_D001_Q216[0][0][0] + coordinate_dofs[4] * FE42_C0_D001_Q216[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE42_C0_D001_Q216[0][0][0] + coordinate_dofs[9] * FE42_C0_D001_Q216[0][0][1];
    const double w0_d1_c3 = w[0][12] * FE42_C0_D001_Q216[0][0][0] + w[0][14] * FE42_C0_D001_Q216[0][0][1];
    const double w0_d2_c3 = w[0][12] * FE42_C0_D001_Q216[0][0][0] + w[0][15] * FE42_C0_D001_Q216[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE42_C0_D001_Q216[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE42_C0_D001_Q216[0][0][0] + w[1][2] * FE42_C0_D001_Q216[0][0][1];
    const double w1_d2_c0 = w[1][0] * FE42_C0_D001_Q216[0][0][0] + w[1][3] * FE42_C0_D001_Q216[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE42_C0_D001_Q216[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE42_C0_D001_Q216[0][0][0] + w[0][2] * FE42_C0_D001_Q216[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE42_C0_D001_Q216[0][0][0] + w[0][3] * FE42_C0_D001_Q216[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 4] * FE42_C0_D001_Q216[0][0][ic];
    const double w1_d1_c1 = w[1][4] * FE42_C0_D001_Q216[0][0][0] + w[1][6] * FE42_C0_D001_Q216[0][0][1];
    const double w1_d2_c1 = w[1][4] * FE42_C0_D001_Q216[0][0][0] + w[1][7] * FE42_C0_D001_Q216[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE42_C0_D001_Q216[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE42_C0_D001_Q216[0][0][0] + w[0][6] * FE42_C0_D001_Q216[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE42_C0_D001_Q216[0][0][0] + w[0][7] * FE42_C0_D001_Q216[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 8] * FE42_C0_D001_Q216[0][0][ic];
    const double w1_d1_c2 = w[1][8] * FE42_C0_D001_Q216[0][0][0] + w[1][10] * FE42_C0_D001_Q216[0][0][1];
    const double w1_d2_c2 = w[1][8] * FE42_C0_D001_Q216[0][0][0] + w[1][11] * FE42_C0_D001_Q216[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE42_C0_D001_Q216[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE42_C0_D001_Q216[0][0][0] + w[0][10] * FE42_C0_D001_Q216[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE42_C0_D001_Q216[0][0][0] + w[0][11] * FE42_C0_D001_Q216[0][0][1];
    alignas(32) double sp[278];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = w0_d0_c3 * sp[14];
    sp[16] = J_c3 * (-1 * J_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = w0_d1_c3 * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = w0_d2_c3 * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = J_c2 * J_c7;
    sp[25] = J_c8 * (-1 * J_c1);
    sp[26] = sp[24] + sp[25];
    sp[27] = sp[26] / sp[13];
    sp[28] = w0_d0_c3 * sp[27];
    sp[29] = J_c0 * J_c8;
    sp[30] = J_c6 * (-1 * J_c2);
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] / sp[13];
    sp[33] = w0_d1_c3 * sp[32];
    sp[34] = sp[28] + sp[33];
    sp[35] = J_c1 * J_c6;
    sp[36] = J_c0 * J_c7;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = w0_d2_c3 * sp[38];
    sp[40] = sp[34] + sp[39];
    sp[41] = J_c1 * J_c5;
    sp[42] = J_c2 * J_c4;
    sp[43] = sp[41] + -1 * sp[42];
    sp[44] = sp[43] / sp[13];
    sp[45] = w0_d0_c3 * sp[44];
    sp[46] = J_c2 * J_c3;
    sp[47] = J_c0 * J_c5;
    sp[48] = sp[46] + -1 * sp[47];
    sp[49] = sp[48] / sp[13];
    sp[50] = w0_d1_c3 * sp[49];
    sp[51] = sp[45] + sp[50];
    sp[52] = J_c0 * J_c4;
    sp[53] = J_c1 * J_c3;
    sp[54] = sp[52] + -1 * sp[53];
    sp[55] = sp[54] / sp[13];
    sp[56] = w0_d2_c3 * sp[55];
    sp[57] = sp[51] + sp[56];
    sp[58] = w1_d0_c0 * sp[14];
    sp[59] = w1_d1_c0 * sp[18];
    sp[60] = sp[58] + sp[59];
    sp[61] = w1_d2_c0 * sp[21];
    sp[62] = sp[60] + sp[61];
    sp[63] = sp[62] * (1.0 + -1 * w[5][0]);
    sp[64] = w0_d0_c0 * sp[14];
    sp[65] = w0_d1_c0 * sp[18];
    sp[66] = sp[64] + sp[65];
    sp[67] = w0_d2_c0 * sp[21];
    sp[68] = sp[66] + sp[67];
    sp[69] = sp[68] * w[5][0];
    sp[70] = sp[63] + sp[69];
    sp[71] = w1_d0_c1 * sp[27];
    sp[72] = w1_d1_c1 * sp[32];
    sp[73] = sp[71] + sp[72];
    sp[74] = w1_d2_c1 * sp[38];
    sp[75] = sp[73] + sp[74];
    sp[76] = sp[75] * (1.0 + -1 * w[5][0]);
    sp[77] = w0_d0_c1 * sp[27];
    sp[78] = w0_d1_c1 * sp[32];
    sp[79] = sp[77] + sp[78];
    sp[80] = w0_d2_c1 * sp[38];
    sp[81] = sp[79] + sp[80];
    sp[82] = sp[81] * w[5][0];
    sp[83] = sp[76] + sp[82];
    sp[84] = sp[70] + sp[83];
    sp[85] = w1_d0_c2 * sp[44];
    sp[86] = w1_d1_c2 * sp[49];
    sp[87] = sp[85] + sp[86];
    sp[88] = w1_d2_c2 * sp[55];
    sp[89] = sp[87] + sp[88];
    sp[90] = sp[89] * (1.0 + -1 * w[5][0]);
    sp[91] = w0_d0_c2 * sp[44];
    sp[92] = w0_d1_c2 * sp[49];
    sp[93] = sp[91] + sp[92];
    sp[94] = w0_d2_c2 * sp[55];
    sp[95] = sp[93] + sp[94];
    sp[96] = sp[95] * w[5][0];
    sp[97] = sp[90] + sp[96];
    sp[98] = sp[84] + sp[97];
    sp[99] = w1_d0_c0 * sp[27];
    sp[100] = w1_d1_c0 * sp[32];
    sp[101] = sp[99] + sp[100];
    sp[102] = w1_d2_c0 * sp[38];
    sp[103] = sp[101] + sp[102];
    sp[104] = sp[103] * (1.0 + -1 * w[5][0]);
    sp[105] = w0_d0_c0 * sp[27];
    sp[106] = w0_d1_c0 * sp[32];
    sp[107] = sp[105] + sp[106];
    sp[108] = w0_d2_c0 * sp[38];
    sp[109] = sp[107] + sp[108];
    sp[110] = sp[109] * w[5][0];
    sp[111] = sp[104] + sp[110];
    sp[112] = w1_d0_c0 * sp[44];
    sp[113] = w1_d1_c0 * sp[49];
    sp[114] = sp[112] + sp[113];
    sp[115] = w1_d2_c0 * sp[55];
    sp[116] = sp[114] + sp[115];
    sp[117] = sp[116] * (1.0 + -1 * w[5][0]);
    sp[118] = w0_d0_c0 * sp[44];
    sp[119] = w0_d1_c0 * sp[49];
    sp[120] = sp[118] + sp[119];
    sp[121] = w0_d2_c0 * sp[55];
    sp[122] = sp[120] + sp[121];
    sp[123] = sp[122] * w[5][0];
    sp[124] = sp[117] + sp[123];
    sp[125] = w1_d0_c1 * sp[14];
    sp[126] = w1_d1_c1 * sp[18];
    sp[127] = sp[125] + sp[126];
    sp[128] = w1_d2_c1 * sp[21];
    sp[129] = sp[127] + sp[128];
    sp[130] = sp[129] * (1.0 + -1 * w[5][0]);
    sp[131] = w0_d0_c1 * sp[14];
    sp[132] = w0_d1_c1 * sp[18];
    sp[133] = sp[131] + sp[132];
    sp[134] = w0_d2_c1 * sp[21];
    sp[135] = sp[133] + sp[134];
    sp[136] = sp[135] * w[5][0];
    sp[137] = sp[130] + sp[136];
    sp[138] = w1_d0_c1 * sp[44];
    sp[139] = w1_d1_c1 * sp[49];
    sp[140] = sp[138] + sp[139];
    sp[141] = w1_d2_c1 * sp[55];
    sp[142] = sp[140] + sp[141];
    sp[143] = sp[142] * (1.0 + -1 * w[5][0]);
    sp[144] = w0_d0_c1 * sp[44];
    sp[145] = w0_d1_c1 * sp[49];
    sp[146] = sp[144] + sp[145];
    sp[147] = w0_d2_c1 * sp[55];
    sp[148] = sp[146] + sp[147];
    sp[149] = sp[148] * w[5][0];
    sp[150] = sp[143] + sp[149];
    sp[151] = w1_d0_c2 * sp[14];
    sp[152] = w1_d1_c2 * sp[18];
    sp[153] = sp[151] + sp[152];
    sp[154] = w1_d2_c2 * sp[21];
    sp[155] = sp[153] + sp[154];
    sp[156] = sp[155] * (1.0 + -1 * w[5][0]);
    sp[157] = w0_d0_c2 * sp[14];
    sp[158] = w0_d1_c2 * sp[18];
    sp[159] = sp[157] + sp[158];
    sp[160] = w0_d2_c2 * sp[21];
    sp[161] = sp[159] + sp[160];
    sp[162] = sp[161] * w[5][0];
    sp[163] = sp[156] + sp[162];
    sp[164] = w1_d0_c2 * sp[27];
    sp[165] = w1_d1_c2 * sp[32];
    sp[166] = sp[164] + sp[165];
    sp[167] = w1_d2_c2 * sp[38];
    sp[168] = sp[166] + sp[167];
    sp[169] = sp[168] * (1.0 + -1 * w[5][0]);
    sp[170] = w0_d0_c2 * sp[27];
    sp[171] = w0_d1_c2 * sp[32];
    sp[172] = sp[170] + sp[171];
    sp[173] = w0_d2_c2 * sp[38];
    sp[174] = sp[172] + sp[173];
    sp[175] = sp[174] * w[5][0];
    sp[176] = sp[169] + sp[175];
    sp[177] = sp[98] * sp[14];
    sp[178] = sp[98] * sp[18];
    sp[179] = sp[98] * sp[21];
    sp[180] = sp[98] * sp[27];
    sp[181] = sp[98] * sp[32];
    sp[182] = sp[98] * sp[38];
    sp[183] = sp[98] * sp[44];
    sp[184] = sp[98] * sp[49];
    sp[185] = sp[98] * sp[55];
    sp[186] = (coordinate_dofs[6] - coordinate_dofs[9]) * (coordinate_dofs[6] - coordinate_dofs[9]);
    sp[187] = (coordinate_dofs[7] - coordinate_dofs[10]) * (coordinate_dofs[7] - coordinate_dofs[10]);
    sp[188] = sp[186] + sp[187];
    sp[189] = (coordinate_dofs[8] - coordinate_dofs[11]) * (coordinate_dofs[8] - coordinate_dofs[11]);
    sp[190] = sp[188] + sp[189];
    sp[191] = (coordinate_dofs[3] - coordinate_dofs[9]) * (coordinate_dofs[3] - coordinate_dofs[9]);
    sp[192] = (coordinate_dofs[4] - coordinate_dofs[10]) * (coordinate_dofs[4] - coordinate_dofs[10]);
    sp[193] = sp[191] + sp[192];
    sp[194] = (coordinate_dofs[5] - coordinate_dofs[11]) * (coordinate_dofs[5] - coordinate_dofs[11]);
    sp[195] = sp[193] + sp[194];
    sp[196] = std::max(sp[190], sp[195]);
    sp[197] = (coordinate_dofs[3] - coordinate_dofs[6]) * (coordinate_dofs[3] - coordinate_dofs[6]);
    sp[198] = (coordinate_dofs[4] - coordinate_dofs[7]) * (coordinate_dofs[4] - coordinate_dofs[7]);
    sp[199] = sp[197] + sp[198];
    sp[200] = (coordinate_dofs[5] - coordinate_dofs[8]) * (coordinate_dofs[5] - coordinate_dofs[8]);
    sp[201] = sp[199] + sp[200];
    sp[202] = std::max(sp[196], sp[201]);
    sp[203] = (coordinate_dofs[0] - coordinate_dofs[9]) * (coordinate_dofs[0] - coordinate_dofs[9]);
    sp[204] = (coordinate_dofs[1] - coordinate_dofs[10]) * (coordinate_dofs[1] - coordinate_dofs[10]);
    sp[205] = sp[203] + sp[204];
    sp[206] = (coordinate_dofs[2] - coordinate_dofs[11]) * (coordinate_dofs[2] - coordinate_dofs[11]);
    sp[207] = sp[205] + sp[206];
    sp[208] = std::max(sp[202], sp[207]);
    sp[209] = (coordinate_dofs[0] - coordinate_dofs[6]) * (coordinate_dofs[0] - coordinate_dofs[6]);
    sp[210] = (coordinate_dofs[1] - coordinate_dofs[7]) * (coordinate_dofs[1] - coordinate_dofs[7]);
    sp[211] = sp[209] + sp[210];
    sp[212] = (coordinate_dofs[2] - coordinate_dofs[8]) * (coordinate_dofs[2] - coordinate_dofs[8]);
    sp[213] = sp[211] + sp[212];
    sp[214] = std::max(sp[208], sp[213]);
    sp[215] = (coordinate_dofs[0] - coordinate_dofs[3]) * (coordinate_dofs[0] - coordinate_dofs[3]);
    sp[216] = (coordinate_dofs[1] - coordinate_dofs[4]) * (coordinate_dofs[1] - coordinate_dofs[4]);
    sp[217] = sp[215] + sp[216];
    sp[218] = (coordinate_dofs[2] - coordinate_dofs[5]) * (coordinate_dofs[2] - coordinate_dofs[5]);
    sp[219] = sp[217] + sp[218];
    sp[220] = std::max(sp[214], sp[219]);
    sp[221] = std::sqrt(sp[220]);
    sp[222] = sp[70] * sp[14];
    sp[223] = sp[70] * sp[18];
    sp[224] = sp[70] * sp[21];
    sp[225] = sp[137] * sp[14];
    sp[226] = sp[137] * sp[18];
    sp[227] = sp[137] * sp[21];
    sp[228] = sp[163] * sp[14];
    sp[229] = sp[163] * sp[18];
    sp[230] = sp[163] * sp[21];
    sp[231] = sp[111] * sp[27];
    sp[232] = sp[111] * sp[32];
    sp[233] = sp[111] * sp[38];
    sp[234] = sp[83] * sp[27];
    sp[235] = sp[83] * sp[32];
    sp[236] = sp[83] * sp[38];
    sp[237] = sp[176] * sp[27];
    sp[238] = sp[176] * sp[32];
    sp[239] = sp[176] * sp[38];
    sp[240] = sp[231] + sp[222];
    sp[241] = sp[232] + sp[223];
    sp[242] = sp[224] + sp[233];
    sp[243] = sp[234] + sp[225];
    sp[244] = sp[235] + sp[226];
    sp[245] = sp[227] + sp[236];
    sp[246] = sp[237] + sp[228];
    sp[247] = sp[238] + sp[229];
    sp[248] = sp[230] + sp[239];
    sp[249] = sp[124] * sp[44];
    sp[250] = sp[124] * sp[49];
    sp[251] = sp[124] * sp[55];
    sp[252] = sp[150] * sp[44];
    sp[253] = sp[150] * sp[49];
    sp[254] = sp[150] * sp[55];
    sp[255] = sp[97] * sp[44];
    sp[256] = sp[97] * sp[49];
    sp[257] = sp[97] * sp[55];
    sp[258] = sp[240] + sp[249];
    sp[259] = sp[241] + sp[250];
    sp[260] = sp[242] + sp[251];
    sp[261] = sp[243] + sp[252];
    sp[262] = sp[244] + sp[253];
    sp[263] = sp[245] + sp[254];
    sp[264] = sp[246] + sp[255];
    sp[265] = sp[247] + sp[256];
    sp[266] = sp[248] + sp[257];
    sp[267] = sp[258] * w[4][0];
    sp[268] = sp[259] * w[4][0];
    sp[269] = sp[260] * w[4][0];
    sp[270] = sp[261] * w[4][0];
    sp[271] = sp[262] * w[4][0];
    sp[272] = sp[263] * w[4][0];
    sp[273] = sp[264] * w[4][0];
    sp[274] = sp[265] * w[4][0];
    sp[275] = sp[266] * w[4][0];
    sp[276] = std::abs(sp[13]);
    sp[277] = sp[98] * sp[276];
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[2] = {};
    alignas(32) double BF3[2] = {};
    alignas(32) double BF4[2] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[2] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[4] = {};
    alignas(32) double BF10[2] = {};
    alignas(32) double BF11[2] = {};
    alignas(32) double BF12[2] = {};
    alignas(32) double BF13[2] = {};
    alignas(32) double BF14[2] = {};
    for (int iq = 0; iq < 216; ++iq)
    {
        // Quadrature loop body setup (num_points=216)
        // Unstructured varying computations for num_points=216
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE42_C0_Q216[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE42_C0_Q216[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE42_C0_Q216[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE42_C0_Q216[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE42_C0_Q216[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE42_C0_Q216[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c0 += w[2][ic] * FE42_C0_Q216[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c1 += w[2][ic + 4] * FE42_C0_Q216[0][iq][ic];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c2 += w[2][ic + 8] * FE42_C0_Q216[0][iq][ic];
        alignas(32) double sv216[129];
        sv216[0] = w1_c0 * (1.0 + -1 * w[5][0]);
        sv216[1] = w0_c0 * w[5][0];
        sv216[2] = sv216[0] + sv216[1];
        sv216[3] = sv216[2] * sp[14];
        sv216[4] = sv216[2] * sp[18];
        sv216[5] = sv216[2] * sp[21];
        sv216[6] = w1_c1 * (1.0 + -1 * w[5][0]);
        sv216[7] = w0_c1 * w[5][0];
        sv216[8] = sv216[6] + sv216[7];
        sv216[9] = sv216[8] * sp[27];
        sv216[10] = sv216[8] * sp[32];
        sv216[11] = sv216[8] * sp[38];
        sv216[12] = sv216[9] + sv216[3];
        sv216[13] = sv216[10] + sv216[4];
        sv216[14] = sv216[5] + sv216[11];
        sv216[15] = w1_c2 * (1.0 + -1 * w[5][0]);
        sv216[16] = w0_c2 * w[5][0];
        sv216[17] = sv216[15] + sv216[16];
        sv216[18] = sv216[17] * sp[44];
        sv216[19] = sv216[17] * sp[49];
        sv216[20] = sv216[17] * sp[55];
        sv216[21] = sv216[12] + sv216[18];
        sv216[22] = sv216[13] + sv216[19];
        sv216[23] = sv216[14] + sv216[20];
        sv216[24] = sv216[2] * sp[70];
        sv216[25] = sv216[8] * sp[111];
        sv216[26] = sv216[24] + sv216[25];
        sv216[27] = sv216[17] * sp[124];
        sv216[28] = sv216[26] + sv216[27];
        sv216[29] = sv216[28] + sp[23];
        sv216[30] = sv216[29] + -1 * w2_c0;
        sv216[31] = sv216[30] * sv216[21];
        sv216[32] = sv216[30] * sv216[22];
        sv216[33] = sv216[30] * sv216[23];
        sv216[34] = sv216[30] * sp[14];
        sv216[35] = sv216[30] * sp[18];
        sv216[36] = sv216[30] * sp[21];
        sv216[37] = sv216[2] * sp[137];
        sv216[38] = sv216[8] * sp[83];
        sv216[39] = sv216[37] + sv216[38];
        sv216[40] = sv216[17] * sp[150];
        sv216[41] = sv216[39] + sv216[40];
        sv216[42] = sv216[41] + sp[40];
        sv216[43] = sv216[42] + -1 * w2_c1;
        sv216[44] = sv216[43] * sp[27];
        sv216[45] = sv216[43] * sp[32];
        sv216[46] = sv216[43] * sp[38];
        sv216[47] = sv216[43] * sv216[21];
        sv216[48] = sv216[43] * sv216[22];
        sv216[49] = sv216[43] * sv216[23];
        sv216[50] = sv216[44] + sv216[34];
        sv216[51] = sv216[45] + sv216[35];
        sv216[52] = sv216[36] + sv216[46];
        sv216[53] = sv216[2] * sp[163];
        sv216[54] = sv216[8] * sp[176];
        sv216[55] = sv216[53] + sv216[54];
        sv216[56] = sv216[17] * sp[97];
        sv216[57] = sv216[55] + sv216[56];
        sv216[58] = sv216[57] + sp[57];
        sv216[59] = sv216[58] + -1 * w2_c2;
        sv216[60] = sv216[59] * sp[44];
        sv216[61] = sv216[59] * sp[49];
        sv216[62] = sv216[59] * sp[55];
        sv216[63] = sv216[59] * sv216[21];
        sv216[64] = sv216[59] * sv216[22];
        sv216[65] = sv216[59] * sv216[23];
        sv216[66] = sv216[50] + sv216[60];
        sv216[67] = sv216[51] + sv216[61];
        sv216[68] = sv216[52] + sv216[62];
        sv216[69] = sv216[31] + sp[177];
        sv216[70] = sv216[32] + sp[178];
        sv216[71] = sv216[33] + sp[179];
        sv216[72] = sv216[47] + sp[180];
        sv216[73] = sv216[48] + sp[181];
        sv216[74] = sv216[49] + sp[182];
        sv216[75] = sv216[63] + sp[183];
        sv216[76] = sv216[64] + sp[184];
        sv216[77] = sv216[65] + sp[185];
        sv216[78] = sv216[69] * sp[221];
        sv216[79] = sv216[70] * sp[221];
        sv216[80] = sv216[71] * sp[221];
        sv216[81] = sv216[66] * sp[221];
        sv216[82] = sv216[67] * sp[221];
        sv216[83] = sv216[68] * sp[221];
        sv216[84] = sv216[72] * sp[221];
        sv216[85] = sv216[73] * sp[221];
        sv216[86] = sv216[74] * sp[221];
        sv216[87] = sv216[75] * sp[221];
        sv216[88] = sv216[76] * sp[221];
        sv216[89] = sv216[77] * sp[221];
        sv216[90] = w0_c0 + -1 * w1_c0;
        sv216[91] = w0_c1 + -1 * w1_c1;
        sv216[92] = w0_c2 + -1 * w1_c2;
        sv216[93] = sv216[90] * (1 / w[3][0]);
        sv216[94] = sv216[91] * (1 / w[3][0]);
        sv216[95] = sv216[92] * (1 / w[3][0]);
        sv216[96] = -1 * w2_c0 + sv216[93];
        sv216[97] = -1 * w2_c1 + sv216[94];
        sv216[98] = -1 * w2_c2 + sv216[95];
        sv216[99] = sv216[78] + sp[267];
        sv216[100] = sv216[79] + sp[268];
        sv216[101] = sv216[80] + sp[269];
        sv216[102] = sv216[84] + sp[270];
        sv216[103] = sv216[85] + sp[271];
        sv216[104] = sv216[86] + sp[272];
        sv216[105] = sv216[87] + sp[273];
        sv216[106] = sv216[88] + sp[274];
        sv216[107] = sv216[89] + sp[275];
        sv216[108] = sp[23] + sv216[96];
        sv216[109] = sp[40] + sv216[97];
        sv216[110] = sp[57] + sv216[98];
        sv216[111] = sv216[108] + sv216[28];
        sv216[112] = sv216[109] + sv216[41];
        sv216[113] = sv216[110] + sv216[57];
        sv216[114] = sv216[111] * sp[276];
        sv216[115] = sv216[112] * sp[276];
        sv216[116] = sv216[113] * sp[276];
        sv216[117] = sv216[99] * sp[276];
        sv216[118] = sv216[100] * sp[276];
        sv216[119] = sv216[101] * sp[276];
        sv216[120] = sv216[81] * sp[276];
        sv216[121] = sv216[82] * sp[276];
        sv216[122] = sv216[83] * sp[276];
        sv216[123] = sv216[102] * sp[276];
        sv216[124] = sv216[103] * sp[276];
        sv216[125] = sv216[104] * sp[276];
        sv216[126] = sv216[105] * sp[276];
        sv216[127] = sv216[106] * sp[276];
        sv216[128] = sv216[107] * sp[276];
        const double fw0 = sv216[117] * weights216[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE42_C0_D001_Q216[0][0][i];
        const double fw1 = sv216[114] * weights216[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE42_C0_Q216[0][iq][i];
        const double fw2 = sv216[118] * weights216[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE42_C0_D001_Q216[0][0][i];
        const double fw3 = sv216[119] * weights216[iq];
        for (int i = 0; i < 2; ++i)
            BF3[i] += fw3 * FE42_C0_D001_Q216[0][0][i];
        const double fw4 = sv216[123] * weights216[iq];
        for (int i = 0; i < 2; ++i)
            BF4[i] += fw4 * FE42_C0_D001_Q216[0][0][i];
        const double fw5 = sv216[115] * weights216[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE42_C0_Q216[0][iq][i];
        const double fw6 = sv216[124] * weights216[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE42_C0_D001_Q216[0][0][i];
        const double fw7 = sv216[125] * weights216[iq];
        for (int i = 0; i < 2; ++i)
            BF7[i] += fw7 * FE42_C0_D001_Q216[0][0][i];
        const double fw8 = sv216[126] * weights216[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE42_C0_D001_Q216[0][0][i];
        const double fw9 = sv216[116] * weights216[iq];
        for (int i = 0; i < 4; ++i)
            BF9[i] += fw9 * FE42_C0_Q216[0][iq][i];
        const double fw10 = sv216[127] * weights216[iq];
        for (int i = 0; i < 2; ++i)
            BF10[i] += fw10 * FE42_C0_D001_Q216[0][0][i];
        const double fw11 = sv216[128] * weights216[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE42_C0_D001_Q216[0][0][i];
        const double fw12 = sv216[120] * weights216[iq];
        for (int i = 0; i < 2; ++i)
            BF12[i] += fw12 * FE42_C0_D001_Q216[0][0][i];
        const double fw13 = sv216[121] * weights216[iq];
        for (int i = 0; i < 2; ++i)
            BF13[i] += fw13 * FE42_C0_D001_Q216[0][0][i];
        const double fw14 = sv216[122] * weights216[iq];
        for (int i = 0; i < 2; ++i)
            BF14[i] += fw14 * FE42_C0_D001_Q216[0][0][i];
    }
    std::fill(A, A + 12, 0.0);
    A[12] = 0.0416666666666667 * sp[277];
    A[13] = 0.04166666666666675 * sp[277];
    A[14] = 0.04166666666666671 * sp[277];
    A[15] = 0.04166666666666673 * sp[277];
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    static const int DM6[2] = { 12, 14 };
    static const int DM7[2] = { 12, 15 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
    for (int i = 0; i < 2; ++i)
        A[DM1[i]] += BF3[i];
    for (int i = 0; i < 2; ++i)
        A[i + 4] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[DM2[i]] += BF6[i];
    for (int i = 0; i < 2; ++i)
        A[DM3[i]] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[i + 8] += BF8[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF9[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
    for (int i = 0; i < 2; ++i)
        A[i + 12] += BF12[i];
    for (int i = 0; i < 2; ++i)
        A[DM6[i]] += BF13[i];
    for (int i = 0; i < 2; ++i)
        A[DM7[i]] += BF14[i];
  }

};


class nonlinearns_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  nonlinearns_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~nonlinearns_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 10
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           10
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights216[216] = { 0.0003873813194994919, 0.0006651185320093223, 0.0005858361910284347, 0.0003177012134009132, 9.737569218620557e-5, 1.134216942858236e-5, 0.0007261290454488172, 0.001246735091362301, 0.001098123871152249, 0.0005955167872389845, 0.0001825264019143804, 2.126039188243837e-5, 0.0007542546786186336, 0.001295025700392986, 0.001140658224196833, 0.0006185833300378595, 0.0001895963169056989, 2.208388460302278e-5, 0.0005285480847880828, 0.0009074963312758541, 0.0007993224793794701, 0.0004334756464118112, 0.0001328606543971471, 1.547540272867239e-5, 0.0002354768656004508, 0.0004043045425439875, 0.0003561113122256885, 0.000193120530504066, 5.919160689345546e-5, 6.894546462907932e-6, 4.681288071535159e-5, 8.037588012956056e-5, 7.079504960327859e-5, 3.83924269380752e-5, 1.176731151821484e-5, 1.370638174291803e-6, 0.0008157169605546229, 0.001400554027850867, 0.00123360754139111, 0.0006689901012644167, 0.0002050460351693296, 2.388344379727091e-5, 0.001529025144240894, 0.002625276202416827, 0.002312342442444397, 0.001253992175651298, 0.0003843496686493298, 4.476845261653239e-5, 0.001588249879270966, 0.002726962749596587, 0.002401907920794034, 0.001302563878093511, 0.000399236936769406, 4.650249849138737e-5, 0.001112974775829033, 0.001910934037860289, 0.001683150091555361, 0.0009127787504630996, 0.0002797674635477128, 3.258687975326573e-5, 0.0004958485694062517, 0.0008513525458804195, 0.0007498710510955289, 0.0004066579471798192, 0.0001246410067678467, 1.451799093562967e-5, 9.857486370605128e-5, 0.0001692491747560218, 0.0001490746191874023, 8.084373776904129e-5, 2.477867440262618e-5, 2.886181520053689e-6, 0.001057998858597558, 0.001816542544196867, 0.001600010094018067, 0.0008676916109106968, 0.0002659482169177954, 3.097723536324522e-5, 0.001983171780900475, 0.003405028165372252, 0.002999147722917846, 0.00162644931353061, 0.0004985080982708227, 5.806544924267081e-5, 0.00205998727584857, 0.003536917357400039, 0.003115315681224402, 0.001689447642888703, 0.0005178171398138199, 6.031453642004785e-5, 0.001443547332489404, 0.002478514152184317, 0.002183074475370925, 0.001183889661293119, 0.0003628631883600435, 4.226574075494212e-5, 0.0006431240808237643, 0.001104218822657781, 0.0009725955870955502, 0.0005274423173245576, 0.0001616615189724279, 1.883008271469836e-5, 0.0001278532853068322, 0.0002195190763088946, 0.0001933523324547521, 0.0001048557115034738, 3.213836478000209e-5, 3.743426827665786e-6, 0.001057998858597558, 0.001816542544196866, 0.001600010094018067, 0.0008676916109106963, 0.0002659482169177953, 3.09772353632452e-5, 0.001983171780900474, 0.00340502816537225, 0.002999147722917844, 0.00162644931353061, 0.0004985080982708225, 5.806544924267078e-5, 0.002059987275848568, 0.003536917357400037, 0.0031153156812244, 0.001689447642888702, 0.0005178171398138195, 6.03145364200478e-5, 0.001443547332489403, 0.002478514152184316, 0.002183074475370924, 0.001183889661293119, 0.0003628631883600433, 4.22657407549421e-5, 0.0006431240808237638, 0.001104218822657781, 0.0009725955870955495, 0.0005274423173245572, 0.0001616615189724277, 1.883008271469835e-5, 0.0001278532853068321, 0.0002195190763088945, 0.000193352332454752, 0.0001048557115034737, 3.213836478000207e-5, 3.743426827665784e-6, 0.0008157169605546229, 0.001400554027850867, 0.00123360754139111, 0.0006689901012644167, 0.0002050460351693296, 2.388344379727091e-5, 0.001529025144240894, 0.002625276202416827, 0.002312342442444397, 0.001253992175651298, 0.0003843496686493298, 4.476845261653239e-5, 0.001588249879270966, 0.002726962749596587, 0.002401907920794034, 0.001302563878093511, 0.000399236936769406, 4.650249849138737e-5, 0.001112974775829033, 0.001910934037860289, 0.001683150091555361, 0.0009127787504630996, 0.0002797674635477128, 3.258687975326573e-5, 0.0004958485694062517, 0.0008513525458804195, 0.0007498710510955289, 0.0004066579471798192, 0.0001246410067678467, 1.451799093562967e-5, 9.857486370605128e-5, 0.0001692491747560218, 0.0001490746191874023, 8.084373776904129e-5, 2.477867440262618e-5, 2.886181520053689e-6, 0.000387381319499493, 0.000665118532009324, 0.0005858361910284363, 0.000317701213400914, 9.737569218620582e-5, 1.134216942858239e-5, 0.0007261290454488191, 0.001246735091362304, 0.001098123871152252, 0.0005955167872389862, 0.0001825264019143809, 2.126039188243843e-5, 0.0007542546786186357, 0.00129502570039299, 0.001140658224196836, 0.0006185833300378611, 0.0001895963169056994, 2.208388460302284e-5, 0.0005285480847880842, 0.0009074963312758565, 0.0007993224793794723, 0.0004334756464118124, 0.0001328606543971475, 1.547540272867243e-5, 0.0002354768656004515, 0.0004043045425439885, 0.0003561113122256895, 0.0001931205305040666, 5.919160689345562e-5, 6.894546462907952e-6, 4.681288071535172e-5, 8.037588012956077e-5, 7.079504960327879e-5, 3.83924269380753e-5, 1.176731151821487e-5, 1.370638174291807e-6 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE57_C0_D001_Q216[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE57_C0_Q216[1][216][4] =
        { { { 0.9136121114247775, 0.03192633532428044, 0.02855699815727474, 0.02590455509366722 },
            { 0.8145133057013245, 0.028463310193376, 0.02545944244731432, 0.1315639416579851 },
            { 0.6542501389464598, 0.02286288574851228, 0.02045005728213695, 0.3024369180228911 },
            { 0.4604787770508101, 0.01609151155287547, 0.01439329823156228, 0.5090364131647521 },
            { 0.2666650038791993, 0.009318655287768495, 0.008335213521318311, 0.715681127311714 },
            { 0.1061659414857326, 0.003709987428478295, 0.003318454908227207, 0.8868056161775619 },
            { 0.8018325756224064, 0.02802017985874753, 0.1442426894251789, 0.02590455509366722 },
            { 0.714858410502789, 0.02498085241832221, 0.1285967954209037, 0.1315639416579851 },
            { 0.574203283267168, 0.02006563435033861, 0.1032941643596024, 0.3024369180228911 },
            { 0.4041396553361117, 0.0141227310723564, 0.0727012004267798, 0.5090364131647521 },
            { 0.2340388051066487, 0.00817852705463391, 0.04210154052700347, 0.715681127311714 },
            { 0.09317664382987065, 0.003256074145803883, 0.01676166584676358, 0.8868056161775619 },
            { 0.6240332421066928, 0.02180695099359625, 0.3282552518060438, 0.02590455509366722 },
            { 0.5563448344650003, 0.01944156772764426, 0.2926496561493703, 0.1315639416579851 },
            { 0.4468787467351004, 0.01561625611038507, 0.2350680791316236, 0.3024369180228911 },
            { 0.3145252351309283, 0.01099113945531895, 0.1654472122490007, 0.5090364131647521 },
            { 0.1821427549462075, 0.006365010488129579, 0.09581110725394899, 0.715681127311714 },
            { 0.07251554115600831, 0.002534068292459434, 0.03814477437397034, 0.8868056161775619 },
            { 0.4153805182746055, 0.01451554499745743, 0.5441993816342698, 0.02590455509366722 },
            { 0.3703245117188173, 0.01294105495328567, 0.485170491669912, 0.1315639416579851 },
            { 0.2974596750616619, 0.01039478046833229, 0.3897086264471148, 0.3024369180228911 },
            { 0.2093600891165185, 0.007316124999953588, 0.2742873727187758, 0.5090364131647521 },
            { 0.1212412205704014, 0.004236795697705031, 0.1588408564201798, 0.715681127311714 },
            { 0.04826913221266544, 0.001686773283281394, 0.06323847832649124, 0.8868056161775618 },
            { 0.2171982141813462, 0.007590029653803968, 0.7493072010711825, 0.02590455509366722 },
            { 0.193638890304749, 0.006766744952680009, 0.6680304230845858, 0.1315639416579851 },
            { 0.1555386142872611, 0.005435324131008832, 0.536589143558839, 0.3024369180228911 },
            { 0.1094722440663277, 0.003825526751514432, 0.3776658160174057, 0.5090364131647521 },
            { 0.06339579117104634, 0.002215377031198156, 0.2187077044860416, 0.715681127311714 },
            { 0.02523943433895798, 0.0008819964556337926, 0.08707295302784633, 0.8868056161775619 },
            { 0.06875909033775085, 0.002402798460379524, 0.9029335561082024, 0.02590455509366722 },
            { 0.06130084449151772, 0.002142168752388408, 0.8049930450981088, 0.1315639416579851 },
            { 0.04923932579784932, 0.001720676868120814, 0.6466030793111389, 0.3024369180228911 },
            { 0.03465595676098979, 0.001211058481711272, 0.4550965715925468, 0.5090364131647521 },
            { 0.02006939582166018, 0.0007013285537106443, 0.2635481483129153, 0.715681127311714 },
            { 0.007990123456250695, 0.0002792162642730904, 0.1049250441019143, 0.8868056161775619 },
            { 0.7853686715021336, 0.1601697752469243, 0.02855699815727474, 0.02590455509366722 },
            { 0.7001803334479217, 0.1427962824467787, 0.02545944244731432, 0.1315639416579851 },
            { 0.5624132561609256, 0.1146997685340465, 0.02045005728213695, 0.3024369180228911 },
            { 0.3958415183696897, 0.08072877023399597, 0.01439329823156228, 0.5090364131647521 },
            { 0.2292333225597366, 0.04675033660723111, 0.008335213521318311, 0.715681127311714 },
            { 0.09126346222949364, 0.01861246668471729, 0.003318454908227207, 0.8868056161775619 },
            { 0.6892795933950934, 0.1405731620860605, 0.1442426894251789, 0.02590455509366722 },
            { 0.6145139640204164, 0.1253252989006949, 0.1285967954209037, 0.1315639416579851 },
            { 0.4936025520156745, 0.1006663656018319, 0.1032941643596024, 0.3024369180228911 },
            { 0.3474107011537635, 0.07085168525470456, 0.0727012004267798, 0.5090364131647521 },
            { 0.2011868528755699, 0.04103047928571269, 0.04210154052700347, 0.715681127311714 },
            { 0.08009746813182231, 0.01633524984385222, 0.01676166584676358, 0.8868056161775619 },
            { 0.5364378954676925, 0.1094022976325966, 0.3282552518060438, 0.02590455509366722 },
            { 0.4782508879610305, 0.09753551423161408, 0.2926496561493703, 0.1315639416579851 },
            { 0.3841505199603311, 0.07834448288515439, 0.2350680791316236, 0.3024369180228911 },
            { 0.2703754284555713, 0.05514094613067599, 0.1654472122490007, 0.5090364131647521 },
            { 0.1565754346806508, 0.03193233075368632, 0.09581110725394899, 0.715681127311714 },
            { 0.06233655783321086, 0.01271305161525684, 0.03814477437397032, 0.8868056161775618 },
            { 0.3570736877562231, 0.07282237551583987, 0.5441993816342698, 0.02590455509366722 },
            { 0.3183421784325047, 0.06492338823959824, 0.485170491669912, 0.1315639416579851 },
            { 0.2557053555959438, 0.05214909993405035, 0.3897086264471148, 0.3024369180228911 },
            { 0.1799722803571288, 0.03670393375934332, 0.2742873727187758, 0.5090364131647521 },
            { 0.1042226292098725, 0.02125538705823389, 0.1588408564201798, 0.715681127311714 },
            { 0.0414936095596443, 0.008462295936302587, 0.06323847832649125, 0.8868056161775619 },
            { 0.1867101703131095, 0.03807807352204069, 0.7493072010711825, 0.02590455509366722 },
            { 0.1664578611951879, 0.03394777406224117, 0.6680304230845858, 0.1315639416579851 },
            { 0.1337057087384362, 0.02726822967983372, 0.536589143558839, 0.3024369180228911 },
            { 0.09410566017415149, 0.01919211064369059, 0.3776658160174057, 0.509036413164752 },
            { 0.05449694423729268, 0.0111142239649518, 0.2187077044860416, 0.715681127311714 },
            { 0.02169658301195238, 0.004424847782639395, 0.08707295302784633, 0.8868056161775619 },
            { 0.05910739881506133, 0.01205448998306904, 0.9029335561082024, 0.02590455509366722 },
            { 0.05269606455324025, 0.01074694869066587, 0.8049930450981088, 0.1315639416579851 },
            { 0.04232761738152777, 0.008632385284442363, 0.6466030793111389, 0.3024369180228911 },
            { 0.0297913111928518, 0.006075704049849254, 0.4550965715925468, 0.5090364131647521 },
            { 0.01725226114803486, 0.003518463227335965, 0.2635481483129153, 0.715681127311714 },
            { 0.006868552381806202, 0.001400787338717584, 0.1049250441019143, 0.8868056161775619 },
            { 0.5855810306613443, 0.3599574160877137, 0.02855699815727474, 0.02590455509366722 },
            { 0.522063504933331, 0.3209131109613696, 0.02545944244731432, 0.1315639416579851 },
            { 0.4193425917670089, 0.257770432927963, 0.02045005728213695, 0.3024369180228911 },
            { 0.2951445514908657, 0.1814257371128199, 0.01439329823156228, 0.5090364131647521 },
            { 0.1709193276448261, 0.1050643315221417, 0.008335213521318311, 0.715681127311714 },
            { 0.0680472168209276, 0.04182871209328333, 0.003318454908227207, 0.8868056161775619 },
            { 0.5139357722814826, 0.3159169831996713, 0.1442426894251789, 0.02590455509366722 },
            { 0.4581895528358697, 0.2816497100852415, 0.1285967954209037, 0.1315639416579851 },
            { 0.3680364415269692, 0.2262324760905373, 0.1032941643596024, 0.3024369180228911 },
            { 0.2590339083112362, 0.1592284780972319, 0.0727012004267798, 0.5090364131647521 },
            { 0.1500075174084257, 0.0922098147528569, 0.04210154052700347, 0.715681127311714 },
            { 0.0597217073254103, 0.03671101065026429, 0.01676166584676358, 0.8868056161775619 },
            { 0.3999750271588474, 0.2458651659414416, 0.3282552518060438, 0.02590455509366722 },
            { 0.3565900424208129, 0.2191963597718317, 0.2926496561493703, 0.1315639416579851 },
            { 0.2864275919960105, 0.1760674108494749, 0.2350680791316236, 0.3024369180228911 },
            { 0.2015954134733854, 0.1239209611128619, 0.1654472122490007, 0.5090364131647521 },
            { 0.1167446674963204, 0.0717630979380167, 0.09581110725394899, 0.715681127311714 },
            { 0.04647894308546145, 0.0285706663630063, 0.03814477437397034, 0.8868056161775619 },
            { 0.2662387559952066, 0.1636573072768564, 0.5441993816342698, 0.02590455509366722 },
            { 0.2373600421225577, 0.1459055245495452, 0.485170491669912, 0.1315639416579851 },
            { 0.1906572175703236, 0.1171972379596706, 0.3897086264471148, 0.3024369180228911 },
            { 0.1341896579862666, 0.08248655613020547, 0.2742873727187758, 0.5090364131647521 },
            { 0.07770973919066805, 0.04776827707743831, 0.1588408564201798, 0.715681127311714 },
            { 0.03093817150271941, 0.01901773399322747, 0.06323847832649125, 0.8868056161775619 },
            { 0.1392135158100825, 0.08557472802506765, 0.7493072010711824, 0.02590455509366722 },
            { 0.1241131324145214, 0.07629250284290764, 0.6680304230845858, 0.1315639416579851 },
            { 0.09969270429212213, 0.06128123412614783, 0.536589143558839, 0.3024369180228911 },
            { 0.07016639633771811, 0.04313137448012405, 0.3776658160174057, 0.5090364131647521 },
            { 0.04063362587831588, 0.02497754232392861, 0.2187077044860416, 0.715681127311714 },
            { 0.01617725267506287, 0.0099441781195289, 0.08707295302784633, 0.8868056161775619 },
            { 0.04407124039164162, 0.02709064840648875, 0.9029335561082024, 0.02590455509366722 },
            { 0.03929086671341629, 0.02415214653048984, 0.8049930450981088, 0.1315639416579851 },
            { 0.03156001851246074, 0.01939998415350939, 0.6466030793111389, 0.3024369180228911 },
            { 0.02221278661357404, 0.01365422862912708, 0.4550965715925468, 0.5090364131647521 },
            { 0.01286350886009014, 0.007907215515280685, 0.2635481483129153, 0.715681127311714 },
            { 0.005121281417040301, 0.003148058303483486, 0.1049250441019143, 0.8868056161775619 },
            { 0.3599574160877137, 0.5855810306613443, 0.02855699815727474, 0.02590455509366722 },
            { 0.3209131109613697, 0.5220635049333308, 0.02545944244731432, 0.1315639416579851 },
            { 0.2577704329279631, 0.4193425917670089, 0.02045005728213695, 0.3024369180228911 },
            { 0.18142573711282, 0.2951445514908657, 0.01439329823156228, 0.5090364131647521 },
            { 0.1050643315221418, 0.170919327644826, 0.008335213521318311, 0.715681127311714 },
            { 0.04182871209328335, 0.06804721682092764, 0.003318454908227207, 0.8868056161775619 },
            { 0.3159169831996714, 0.5139357722814825, 0.1442426894251789, 0.02590455509366722 },
            { 0.2816497100852417, 0.4581895528358694, 0.1285967954209037, 0.1315639416579851 },
            { 0.2262324760905374, 0.3680364415269691, 0.1032941643596024, 0.3024369180228911 },
            { 0.159228478097232, 0.2590339083112362, 0.0727012004267798, 0.5090364131647521 },
            { 0.09220981475285712, 0.1500075174084255, 0.04210154052700347, 0.715681127311714 },
            { 0.03671101065026428, 0.05972170732541028, 0.01676166584676358, 0.8868056161775619 },
            { 0.2458651659414416, 0.3999750271588474, 0.3282552518060438, 0.02590455509366722 },
            { 0.2191963597718317, 0.3565900424208128, 0.2926496561493703, 0.1315639416579851 },
            { 0.1760674108494749, 0.2864275919960105, 0.2350680791316236, 0.3024369180228911 },
            { 0.1239209611128619, 0.2015954134733854, 0.1654472122490007, 0.5090364131647521 },
            { 0.0717630979380167, 0.1167446674963204, 0.09581110725394899, 0.715681127311714 },
            { 0.02857066636300629, 0.04647894308546148, 0.03814477437397034, 0.8868056161775619 },
            { 0.1636573072768563, 0.2662387559952066, 0.5441993816342698, 0.02590455509366722 },
            { 0.1459055245495453, 0.2373600421225576, 0.485170491669912, 0.1315639416579851 },
            { 0.1171972379596706, 0.1906572175703235, 0.3897086264471148, 0.3024369180228911 },
            { 0.08248655613020549, 0.1341896579862666, 0.2742873727187758, 0.5090364131647521 },
            { 0.04776827707743837, 0.07770973919066797, 0.1588408564201798, 0.715681127311714 },
            { 0.01901773399322746, 0.0309381715027194, 0.06323847832649125, 0.8868056161775619 },
            { 0.0855747280250678, 0.1392135158100824, 0.7493072010711825, 0.02590455509366722 },
            { 0.0762925028429077, 0.1241131324145213, 0.6680304230845858, 0.1315639416579851 },
            { 0.06128123412614789, 0.0996927042921221, 0.536589143558839, 0.3024369180228911 },
            { 0.04313137448012407, 0.07016639633771807, 0.3776658160174057, 0.5090364131647521 },
            { 0.02497754232392866, 0.04063362587831585, 0.2187077044860416, 0.715681127311714 },
            { 0.009944178119528888, 0.01617725267506291, 0.08707295302784633, 0.8868056161775619 },
            { 0.02709064840648881, 0.04407124039164159, 0.9029335561082024, 0.02590455509366722 },
            { 0.02415214653048995, 0.03929086671341615, 0.8049930450981088, 0.1315639416579851 },
            { 0.01939998415350944, 0.03156001851246066, 0.6466030793111389, 0.3024369180228911 },
            { 0.01365422862912707, 0.02221278661357401, 0.4550965715925468, 0.5090364131647521 },
            { 0.007907215515280739, 0.01286350886009006, 0.2635481483129153, 0.715681127311714 },
            { 0.003148058303483474, 0.00512128141704034, 0.1049250441019143, 0.8868056161775619 },
            { 0.1601697752469242, 0.7853686715021339, 0.02855699815727474, 0.02590455509366722 },
            { 0.1427962824467789, 0.7001803334479217, 0.02545944244731432, 0.1315639416579851 },
            { 0.1146997685340464, 0.5624132561609256, 0.02045005728213695, 0.3024369180228911 },
            { 0.08072877023399593, 0.3958415183696897, 0.01439329823156228, 0.5090364131647521 },
            { 0.04675033660723119, 0.2292333225597366, 0.008335213521318311, 0.715681127311714 },
            { 0.01861246668471728, 0.09126346222949362, 0.003318454908227207, 0.8868056161775619 },
            { 0.1405731620860606, 0.6892795933950934, 0.1442426894251789, 0.02590455509366722 },
            { 0.125325298900695, 0.6145139640204162, 0.1285967954209037, 0.1315639416579851 },
            { 0.100666365601832, 0.4936025520156745, 0.1032941643596024, 0.3024369180228911 },
            { 0.07085168525470457, 0.3474107011537635, 0.0727012004267798, 0.5090364131647521 },
            { 0.04103047928571286, 0.2011868528755698, 0.04210154052700347, 0.715681127311714 },
            { 0.01633524984385221, 0.08009746813182235, 0.01676166584676358, 0.8868056161775619 },
            { 0.1094022976325965, 0.5364378954676925, 0.3282552518060438, 0.02590455509366722 },
            { 0.09753551423161412, 0.4782508879610304, 0.2926496561493703, 0.1315639416579851 },
            { 0.07834448288515433, 0.3841505199603311, 0.2350680791316236, 0.3024369180228911 },
            { 0.05514094613067599, 0.2703754284555713, 0.1654472122490007, 0.5090364131647521 },
            { 0.03193233075368632, 0.1565754346806508, 0.09581110725394899, 0.715681127311714 },
            { 0.01271305161525685, 0.06233655783321092, 0.03814477437397034, 0.8868056161775619 },
            { 0.07282237551583982, 0.3570736877562232, 0.5441993816342698, 0.02590455509366722 },
            { 0.06492338823959826, 0.3183421784325046, 0.485170491669912, 0.1315639416579851 },
            { 0.05214909993405042, 0.2557053555959437, 0.3897086264471148, 0.3024369180228911 },
            { 0.03670393375934321, 0.1799722803571289, 0.2742873727187758, 0.5090364131647521 },
            { 0.02125538705823394, 0.1042226292098724, 0.1588408564201798, 0.715681127311714 },
            { 0.008462295936302575, 0.04149360955964428, 0.06323847832649125, 0.8868056161775619 },
            { 0.03807807352204071, 0.1867101703131095, 0.7493072010711825, 0.02590455509366722 },
            { 0.03394777406224123, 0.1664578611951879, 0.6680304230845858, 0.1315639416579851 },
            { 0.02726822967983372, 0.1337057087384362, 0.536589143558839, 0.3024369180228911 },
            { 0.01919211064369064, 0.09410566017415148, 0.3776658160174057, 0.5090364131647521 },
            { 0.01111422396495186, 0.05449694423729266, 0.2187077044860416, 0.715681127311714 },
            { 0.004424847782639384, 0.02169658301195242, 0.08707295302784633, 0.8868056161775619 },
            { 0.0120544899830691, 0.0591073988150613, 0.9029335561082024, 0.02590455509366722 },
            { 0.01074694869066598, 0.05269606455324011, 0.8049930450981088, 0.1315639416579851 },
            { 0.008632385284442471, 0.04232761738152763, 0.6466030793111389, 0.3024369180228911 },
            { 0.006075704049849307, 0.02979131119285178, 0.4550965715925468, 0.5090364131647521 },
            { 0.003518463227336075, 0.01725226114803472, 0.2635481483129153, 0.715681127311714 },
            { 0.001400787338717573, 0.006868552381806241, 0.1049250441019143, 0.8868056161775619 },
            { 0.03192633532428071, 0.9136121114247773, 0.02855699815727474, 0.02590455509366722 },
            { 0.02846331019337627, 0.8145133057013243, 0.02545944244731432, 0.1315639416579851 },
            { 0.02286288574851253, 0.6542501389464594, 0.02045005728213695, 0.3024369180228911 },
            { 0.01609151155287555, 0.4604787770508101, 0.01439329823156228, 0.5090364131647521 },
            { 0.009318655287768632, 0.2666650038791991, 0.008335213521318311, 0.715681127311714 },
            { 0.003709987428478338, 0.1061659414857326, 0.003318454908227207, 0.8868056161775619 },
            { 0.02802017985874786, 0.8018325756224061, 0.1442426894251789, 0.02590455509366722 },
            { 0.02498085241832234, 0.7148584105027886, 0.1285967954209036, 0.1315639416579851 },
            { 0.02006563435033886, 0.5742032832671676, 0.1032941643596024, 0.3024369180228911 },
            { 0.01412273107235652, 0.4041396553361116, 0.0727012004267798, 0.5090364131647521 },
            { 0.00817852705463413, 0.2340388051066485, 0.04210154052700347, 0.715681127311714 },
            { 0.003256074145803871, 0.09317664382987069, 0.01676166584676358, 0.8868056161775619 },
            { 0.02180695099359635, 0.6240332421066928, 0.3282552518060438, 0.02590455509366722 },
            { 0.01944156772764435, 0.5563448344650003, 0.2926496561493703, 0.1315639416579851 },
            { 0.01561625611038515, 0.4468787467351003, 0.2350680791316236, 0.3024369180228911 },
            { 0.01099113945531905, 0.3145252351309282, 0.1654472122490007, 0.5090364131647521 },
            { 0.006365010488129634, 0.1821427549462075, 0.09581110725394899, 0.715681127311714 },
            { 0.002534068292459423, 0.07251554115600835, 0.03814477437397034, 0.8868056161775619 },
            { 0.01451554499745748, 0.4153805182746055, 0.5441993816342698, 0.02590455509366722 },
            { 0.01294105495328574, 0.3703245117188171, 0.485170491669912, 0.1315639416579851 },
            { 0.01039478046833236, 0.2974596750616618, 0.3897086264471148, 0.3024369180228911 },
            { 0.007316124999953586, 0.2093600891165185, 0.2742873727187758, 0.5090364131647521 },
            { 0.004236795697705085, 0.1212412205704013, 0.1588408564201798, 0.715681127311714 },
            { 0.001686773283281349, 0.0482691322126655, 0.06323847832649125, 0.8868056161775619 },
            { 0.007590029653804038, 0.2171982141813462, 0.7493072010711825, 0.02590455509366722 },
            { 0.006766744952680072, 0.193638890304749, 0.6680304230845858, 0.1315639416579851 },
            { 0.005435324131008892, 0.155538614287261, 0.536589143558839, 0.3024369180228911 },
            { 0.00382552675151443, 0.1094722440663277, 0.3776658160174057, 0.5090364131647521 },
            { 0.002215377031198266, 0.06339579117104625, 0.2187077044860416, 0.715681127311714 },
            { 0.0008819964556337809, 0.02523943433895802, 0.08707295302784633, 0.8868056161775619 },
            { 0.002402798460379635, 0.06875909033775077, 0.9029335561082024, 0.02590455509366722 },
            { 0.002142168752388519, 0.06130084449151758, 0.8049930450981088, 0.1315639416579851 },
            { 0.001720676868120866, 0.04923932579784924, 0.6466030793111389, 0.3024369180228911 },
            { 0.001211058481711325, 0.03465595676098976, 0.4550965715925468, 0.5090364131647521 },
            { 0.0007013285537106986, 0.0200693958216601, 0.2635481483129153, 0.715681127311714 },
            { 0.0002792162642730787, 0.007990123456250735, 0.1049250441019143, 0.8868056161775619 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE57_C0_D001_Q216[0][0][0] + coordinate_dofs[7] * FE57_C0_D001_Q216[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE57_C0_D001_Q216[0][0][0] + coordinate_dofs[11] * FE57_C0_D001_Q216[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE57_C0_D001_Q216[0][0][0] + coordinate_dofs[10] * FE57_C0_D001_Q216[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE57_C0_D001_Q216[0][0][0] + coordinate_dofs[8] * FE57_C0_D001_Q216[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE57_C0_D001_Q216[0][0][0] + coordinate_dofs[3] * FE57_C0_D001_Q216[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE57_C0_D001_Q216[0][0][0] + coordinate_dofs[6] * FE57_C0_D001_Q216[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE57_C0_D001_Q216[0][0][0] + coordinate_dofs[5] * FE57_C0_D001_Q216[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE57_C0_D001_Q216[0][0][0] + coordinate_dofs[4] * FE57_C0_D001_Q216[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE57_C0_D001_Q216[0][0][0] + coordinate_dofs[9] * FE57_C0_D001_Q216[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE57_C0_D001_Q216[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE57_C0_D001_Q216[0][0][0] + w[1][2] * FE57_C0_D001_Q216[0][0][1];
    const double w1_d2_c0 = w[1][0] * FE57_C0_D001_Q216[0][0][0] + w[1][3] * FE57_C0_D001_Q216[0][0][1];
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE57_C0_D001_Q216[0][0][ic];
    const double w0_d1_c0 = w[0][0] * FE57_C0_D001_Q216[0][0][0] + w[0][2] * FE57_C0_D001_Q216[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE57_C0_D001_Q216[0][0][0] + w[0][3] * FE57_C0_D001_Q216[0][0][1];
    double w0_d0_c3 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c3 += w[0][ic + 12] * FE57_C0_D001_Q216[0][0][ic];
    const double w0_d1_c3 = w[0][12] * FE57_C0_D001_Q216[0][0][0] + w[0][14] * FE57_C0_D001_Q216[0][0][1];
    const double w0_d2_c3 = w[0][12] * FE57_C0_D001_Q216[0][0][0] + w[0][15] * FE57_C0_D001_Q216[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 4] * FE57_C0_D001_Q216[0][0][ic];
    const double w1_d1_c1 = w[1][4] * FE57_C0_D001_Q216[0][0][0] + w[1][6] * FE57_C0_D001_Q216[0][0][1];
    const double w1_d2_c1 = w[1][4] * FE57_C0_D001_Q216[0][0][0] + w[1][7] * FE57_C0_D001_Q216[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE57_C0_D001_Q216[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE57_C0_D001_Q216[0][0][0] + w[0][6] * FE57_C0_D001_Q216[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE57_C0_D001_Q216[0][0][0] + w[0][7] * FE57_C0_D001_Q216[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 8] * FE57_C0_D001_Q216[0][0][ic];
    const double w1_d1_c2 = w[1][8] * FE57_C0_D001_Q216[0][0][0] + w[1][10] * FE57_C0_D001_Q216[0][0][1];
    const double w1_d2_c2 = w[1][8] * FE57_C0_D001_Q216[0][0][0] + w[1][11] * FE57_C0_D001_Q216[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE57_C0_D001_Q216[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE57_C0_D001_Q216[0][0][0] + w[0][10] * FE57_C0_D001_Q216[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE57_C0_D001_Q216[0][0][0] + w[0][11] * FE57_C0_D001_Q216[0][0][1];
    alignas(32) double sp[581];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = sp[14] * w[5][0];
    sp[44] = sp[17] * w[5][0];
    sp[45] = sp[18] * w[5][0];
    sp[46] = sp[22] * w[5][0];
    sp[47] = sp[26] * w[5][0];
    sp[48] = sp[30] * w[5][0];
    sp[49] = sp[34] * w[5][0];
    sp[50] = sp[38] * w[5][0];
    sp[51] = sp[42] * w[5][0];
    sp[52] = w1_d0_c0 * sp[14];
    sp[53] = w1_d1_c0 * sp[17];
    sp[54] = sp[52] + sp[53];
    sp[55] = w1_d2_c0 * sp[18];
    sp[56] = sp[54] + sp[55];
    sp[57] = sp[56] * (1.0 + -1 * w[5][0]);
    sp[58] = w0_d0_c0 * sp[14];
    sp[59] = w0_d1_c0 * sp[17];
    sp[60] = sp[58] + sp[59];
    sp[61] = w0_d2_c0 * sp[18];
    sp[62] = sp[60] + sp[61];
    sp[63] = sp[62] * w[5][0];
    sp[64] = sp[57] + sp[63];
    sp[65] = sp[64] * w[5][0];
    sp[66] = w1_d0_c0 * sp[22];
    sp[67] = w1_d1_c0 * sp[26];
    sp[68] = sp[66] + sp[67];
    sp[69] = w1_d2_c0 * sp[30];
    sp[70] = sp[68] + sp[69];
    sp[71] = sp[70] * (1.0 + -1 * w[5][0]);
    sp[72] = w0_d0_c0 * sp[22];
    sp[73] = w0_d1_c0 * sp[26];
    sp[74] = sp[72] + sp[73];
    sp[75] = w0_d2_c0 * sp[30];
    sp[76] = sp[74] + sp[75];
    sp[77] = sp[76] * w[5][0];
    sp[78] = sp[71] + sp[77];
    sp[79] = sp[78] * w[5][0];
    sp[80] = w1_d0_c0 * sp[34];
    sp[81] = w1_d1_c0 * sp[38];
    sp[82] = sp[80] + sp[81];
    sp[83] = w1_d2_c0 * sp[42];
    sp[84] = sp[82] + sp[83];
    sp[85] = sp[84] * (1.0 + -1 * w[5][0]);
    sp[86] = w0_d0_c0 * sp[34];
    sp[87] = w0_d1_c0 * sp[38];
    sp[88] = sp[86] + sp[87];
    sp[89] = w0_d2_c0 * sp[42];
    sp[90] = sp[88] + sp[89];
    sp[91] = sp[90] * w[5][0];
    sp[92] = sp[85] + sp[91];
    sp[93] = sp[92] * w[5][0];
    sp[94] = sp[14] * sp[14];
    sp[95] = sp[14] * sp[17];
    sp[96] = sp[18] * sp[14];
    sp[97] = sp[65] * sp[14];
    sp[98] = sp[79] * sp[14];
    sp[99] = sp[93] * sp[14];
    sp[100] = sp[17] * sp[17];
    sp[101] = sp[18] * sp[17];
    sp[102] = sp[65] * sp[17];
    sp[103] = sp[79] * sp[17];
    sp[104] = sp[93] * sp[17];
    sp[105] = sp[18] * sp[18];
    sp[106] = sp[65] * sp[18];
    sp[107] = sp[79] * sp[18];
    sp[108] = sp[93] * sp[18];
    sp[109] = w0_d0_c3 * sp[14];
    sp[110] = w0_d1_c3 * sp[17];
    sp[111] = sp[109] + sp[110];
    sp[112] = w0_d2_c3 * sp[18];
    sp[113] = sp[111] + sp[112];
    sp[114] = w1_d0_c1 * sp[14];
    sp[115] = w1_d1_c1 * sp[17];
    sp[116] = sp[114] + sp[115];
    sp[117] = w1_d2_c1 * sp[18];
    sp[118] = sp[116] + sp[117];
    sp[119] = sp[118] * (1.0 + -1 * w[5][0]);
    sp[120] = w0_d0_c1 * sp[14];
    sp[121] = w0_d1_c1 * sp[17];
    sp[122] = sp[120] + sp[121];
    sp[123] = w0_d2_c1 * sp[18];
    sp[124] = sp[122] + sp[123];
    sp[125] = sp[124] * w[5][0];
    sp[126] = sp[119] + sp[125];
    sp[127] = sp[126] * w[5][0];
    sp[128] = w1_d0_c1 * sp[22];
    sp[129] = w1_d1_c1 * sp[26];
    sp[130] = sp[128] + sp[129];
    sp[131] = w1_d2_c1 * sp[30];
    sp[132] = sp[130] + sp[131];
    sp[133] = sp[132] * (1.0 + -1 * w[5][0]);
    sp[134] = w0_d0_c1 * sp[22];
    sp[135] = w0_d1_c1 * sp[26];
    sp[136] = sp[134] + sp[135];
    sp[137] = w0_d2_c1 * sp[30];
    sp[138] = sp[136] + sp[137];
    sp[139] = sp[138] * w[5][0];
    sp[140] = sp[133] + sp[139];
    sp[141] = sp[140] * w[5][0];
    sp[142] = w1_d0_c1 * sp[34];
    sp[143] = w1_d1_c1 * sp[38];
    sp[144] = sp[142] + sp[143];
    sp[145] = w1_d2_c1 * sp[42];
    sp[146] = sp[144] + sp[145];
    sp[147] = sp[146] * (1.0 + -1 * w[5][0]);
    sp[148] = w0_d0_c1 * sp[34];
    sp[149] = w0_d1_c1 * sp[38];
    sp[150] = sp[148] + sp[149];
    sp[151] = w0_d2_c1 * sp[42];
    sp[152] = sp[150] + sp[151];
    sp[153] = sp[152] * w[5][0];
    sp[154] = sp[147] + sp[153];
    sp[155] = sp[154] * w[5][0];
    sp[156] = sp[22] * sp[22];
    sp[157] = sp[22] * sp[26];
    sp[158] = sp[22] * sp[30];
    sp[159] = sp[127] * sp[22];
    sp[160] = sp[141] * sp[22];
    sp[161] = sp[155] * sp[22];
    sp[162] = sp[26] * sp[26];
    sp[163] = sp[26] * sp[30];
    sp[164] = sp[127] * sp[26];
    sp[165] = sp[141] * sp[26];
    sp[166] = sp[155] * sp[26];
    sp[167] = sp[30] * sp[30];
    sp[168] = sp[127] * sp[30];
    sp[169] = sp[141] * sp[30];
    sp[170] = sp[155] * sp[30];
    sp[171] = w0_d0_c3 * sp[22];
    sp[172] = w0_d1_c3 * sp[26];
    sp[173] = sp[171] + sp[172];
    sp[174] = w0_d2_c3 * sp[30];
    sp[175] = sp[173] + sp[174];
    sp[176] = sp[156] + sp[94];
    sp[177] = sp[157] + sp[95];
    sp[178] = sp[158] + sp[96];
    sp[179] = sp[162] + sp[100];
    sp[180] = sp[163] + sp[101];
    sp[181] = sp[105] + sp[167];
    sp[182] = sp[159] + sp[97];
    sp[183] = sp[160] + sp[98];
    sp[184] = sp[161] + sp[99];
    sp[185] = sp[164] + sp[102];
    sp[186] = sp[165] + sp[103];
    sp[187] = sp[166] + sp[104];
    sp[188] = sp[106] + sp[168];
    sp[189] = sp[107] + sp[169];
    sp[190] = sp[108] + sp[170];
    sp[191] = w1_d0_c2 * sp[14];
    sp[192] = w1_d1_c2 * sp[17];
    sp[193] = sp[191] + sp[192];
    sp[194] = w1_d2_c2 * sp[18];
    sp[195] = sp[193] + sp[194];
    sp[196] = sp[195] * (1.0 + -1 * w[5][0]);
    sp[197] = w0_d0_c2 * sp[14];
    sp[198] = w0_d1_c2 * sp[17];
    sp[199] = sp[197] + sp[198];
    sp[200] = w0_d2_c2 * sp[18];
    sp[201] = sp[199] + sp[200];
    sp[202] = sp[201] * w[5][0];
    sp[203] = sp[196] + sp[202];
    sp[204] = sp[203] * w[5][0];
    sp[205] = w1_d0_c2 * sp[22];
    sp[206] = w1_d1_c2 * sp[26];
    sp[207] = sp[205] + sp[206];
    sp[208] = w1_d2_c2 * sp[30];
    sp[209] = sp[207] + sp[208];
    sp[210] = sp[209] * (1.0 + -1 * w[5][0]);
    sp[211] = w0_d0_c2 * sp[22];
    sp[212] = w0_d1_c2 * sp[26];
    sp[213] = sp[211] + sp[212];
    sp[214] = w0_d2_c2 * sp[30];
    sp[215] = sp[213] + sp[214];
    sp[216] = sp[215] * w[5][0];
    sp[217] = sp[210] + sp[216];
    sp[218] = sp[217] * w[5][0];
    sp[219] = w1_d0_c2 * sp[34];
    sp[220] = w1_d1_c2 * sp[38];
    sp[221] = sp[219] + sp[220];
    sp[222] = w1_d2_c2 * sp[42];
    sp[223] = sp[221] + sp[222];
    sp[224] = sp[223] * (1.0 + -1 * w[5][0]);
    sp[225] = w0_d0_c2 * sp[34];
    sp[226] = w0_d1_c2 * sp[38];
    sp[227] = sp[225] + sp[226];
    sp[228] = w0_d2_c2 * sp[42];
    sp[229] = sp[227] + sp[228];
    sp[230] = sp[229] * w[5][0];
    sp[231] = sp[224] + sp[230];
    sp[232] = sp[231] * w[5][0];
    sp[233] = sp[34] * sp[34];
    sp[234] = sp[34] * sp[38];
    sp[235] = sp[42] * sp[34];
    sp[236] = sp[204] * sp[34];
    sp[237] = sp[218] * sp[34];
    sp[238] = sp[232] * sp[34];
    sp[239] = sp[38] * sp[38];
    sp[240] = sp[42] * sp[38];
    sp[241] = sp[204] * sp[38];
    sp[242] = sp[218] * sp[38];
    sp[243] = sp[232] * sp[38];
    sp[244] = sp[42] * sp[42];
    sp[245] = sp[204] * sp[42];
    sp[246] = sp[218] * sp[42];
    sp[247] = sp[232] * sp[42];
    sp[248] = w0_d0_c3 * sp[34];
    sp[249] = w0_d1_c3 * sp[38];
    sp[250] = sp[248] + sp[249];
    sp[251] = w0_d2_c3 * sp[42];
    sp[252] = sp[250] + sp[251];
    sp[253] = sp[176] + sp[233];
    sp[254] = sp[177] + sp[234];
    sp[255] = sp[178] + sp[235];
    sp[256] = sp[179] + sp[239];
    sp[257] = sp[180] + sp[240];
    sp[258] = sp[181] + sp[244];
    sp[259] = sp[182] + sp[236];
    sp[260] = sp[183] + sp[237];
    sp[261] = sp[184] + sp[238];
    sp[262] = sp[185] + sp[241];
    sp[263] = sp[186] + sp[242];
    sp[264] = sp[187] + sp[243];
    sp[265] = sp[188] + sp[245];
    sp[266] = sp[189] + sp[246];
    sp[267] = sp[190] + sp[247];
    sp[268] = sp[43] * sp[14];
    sp[269] = sp[44] * sp[14];
    sp[270] = sp[45] * sp[14];
    sp[271] = sp[46] * sp[14];
    sp[272] = sp[47] * sp[14];
    sp[273] = sp[48] * sp[14];
    sp[274] = sp[49] * sp[14];
    sp[275] = sp[50] * sp[14];
    sp[276] = sp[51] * sp[14];
    sp[277] = sp[43] * sp[17];
    sp[278] = sp[44] * sp[17];
    sp[279] = sp[45] * sp[17];
    sp[280] = sp[46] * sp[17];
    sp[281] = sp[47] * sp[17];
    sp[282] = sp[48] * sp[17];
    sp[283] = sp[49] * sp[17];
    sp[284] = sp[50] * sp[17];
    sp[285] = sp[51] * sp[17];
    sp[286] = sp[43] * sp[18];
    sp[287] = sp[44] * sp[18];
    sp[288] = sp[45] * sp[18];
    sp[289] = sp[46] * sp[18];
    sp[290] = sp[47] * sp[18];
    sp[291] = sp[48] * sp[18];
    sp[292] = sp[49] * sp[18];
    sp[293] = sp[50] * sp[18];
    sp[294] = sp[51] * sp[18];
    sp[295] = sp[43] * sp[22];
    sp[296] = sp[44] * sp[22];
    sp[297] = sp[45] * sp[22];
    sp[298] = sp[46] * sp[22];
    sp[299] = sp[47] * sp[22];
    sp[300] = sp[48] * sp[22];
    sp[301] = sp[49] * sp[22];
    sp[302] = sp[50] * sp[22];
    sp[303] = sp[51] * sp[22];
    sp[304] = sp[43] * sp[26];
    sp[305] = sp[44] * sp[26];
    sp[306] = sp[45] * sp[26];
    sp[307] = sp[46] * sp[26];
    sp[308] = sp[47] * sp[26];
    sp[309] = sp[48] * sp[26];
    sp[310] = sp[49] * sp[26];
    sp[311] = sp[50] * sp[26];
    sp[312] = sp[51] * sp[26];
    sp[313] = sp[43] * sp[30];
    sp[314] = sp[44] * sp[30];
    sp[315] = sp[45] * sp[30];
    sp[316] = sp[46] * sp[30];
    sp[317] = sp[47] * sp[30];
    sp[318] = sp[48] * sp[30];
    sp[319] = sp[49] * sp[30];
    sp[320] = sp[50] * sp[30];
    sp[321] = sp[51] * sp[30];
    sp[322] = sp[43] * sp[34];
    sp[323] = sp[44] * sp[34];
    sp[324] = sp[45] * sp[34];
    sp[325] = sp[46] * sp[34];
    sp[326] = sp[47] * sp[34];
    sp[327] = sp[48] * sp[34];
    sp[328] = sp[49] * sp[34];
    sp[329] = sp[50] * sp[34];
    sp[330] = sp[51] * sp[34];
    sp[331] = sp[43] * sp[38];
    sp[332] = sp[44] * sp[38];
    sp[333] = sp[45] * sp[38];
    sp[334] = sp[46] * sp[38];
    sp[335] = sp[47] * sp[38];
    sp[336] = sp[48] * sp[38];
    sp[337] = sp[49] * sp[38];
    sp[338] = sp[50] * sp[38];
    sp[339] = sp[51] * sp[38];
    sp[340] = sp[43] * sp[42];
    sp[341] = sp[44] * sp[42];
    sp[342] = sp[45] * sp[42];
    sp[343] = sp[46] * sp[42];
    sp[344] = sp[47] * sp[42];
    sp[345] = sp[48] * sp[42];
    sp[346] = sp[49] * sp[42];
    sp[347] = sp[50] * sp[42];
    sp[348] = sp[51] * sp[42];
    sp[349] = (coordinate_dofs[6] - coordinate_dofs[9]) * (coordinate_dofs[6] - coordinate_dofs[9]);
    sp[350] = (coordinate_dofs[7] - coordinate_dofs[10]) * (coordinate_dofs[7] - coordinate_dofs[10]);
    sp[351] = sp[349] + sp[350];
    sp[352] = (coordinate_dofs[8] - coordinate_dofs[11]) * (coordinate_dofs[8] - coordinate_dofs[11]);
    sp[353] = sp[351] + sp[352];
    sp[354] = (coordinate_dofs[3] - coordinate_dofs[9]) * (coordinate_dofs[3] - coordinate_dofs[9]);
    sp[355] = (coordinate_dofs[4] - coordinate_dofs[10]) * (coordinate_dofs[4] - coordinate_dofs[10]);
    sp[356] = sp[354] + sp[355];
    sp[357] = (coordinate_dofs[5] - coordinate_dofs[11]) * (coordinate_dofs[5] - coordinate_dofs[11]);
    sp[358] = sp[356] + sp[357];
    sp[359] = std::max(sp[353], sp[358]);
    sp[360] = (coordinate_dofs[3] - coordinate_dofs[6]) * (coordinate_dofs[3] - coordinate_dofs[6]);
    sp[361] = (coordinate_dofs[4] - coordinate_dofs[7]) * (coordinate_dofs[4] - coordinate_dofs[7]);
    sp[362] = sp[360] + sp[361];
    sp[363] = (coordinate_dofs[5] - coordinate_dofs[8]) * (coordinate_dofs[5] - coordinate_dofs[8]);
    sp[364] = sp[362] + sp[363];
    sp[365] = std::max(sp[359], sp[364]);
    sp[366] = (coordinate_dofs[0] - coordinate_dofs[9]) * (coordinate_dofs[0] - coordinate_dofs[9]);
    sp[367] = (coordinate_dofs[1] - coordinate_dofs[10]) * (coordinate_dofs[1] - coordinate_dofs[10]);
    sp[368] = sp[366] + sp[367];
    sp[369] = (coordinate_dofs[2] - coordinate_dofs[11]) * (coordinate_dofs[2] - coordinate_dofs[11]);
    sp[370] = sp[368] + sp[369];
    sp[371] = std::max(sp[365], sp[370]);
    sp[372] = (coordinate_dofs[0] - coordinate_dofs[6]) * (coordinate_dofs[0] - coordinate_dofs[6]);
    sp[373] = (coordinate_dofs[1] - coordinate_dofs[7]) * (coordinate_dofs[1] - coordinate_dofs[7]);
    sp[374] = sp[372] + sp[373];
    sp[375] = (coordinate_dofs[2] - coordinate_dofs[8]) * (coordinate_dofs[2] - coordinate_dofs[8]);
    sp[376] = sp[374] + sp[375];
    sp[377] = std::max(sp[371], sp[376]);
    sp[378] = (coordinate_dofs[0] - coordinate_dofs[3]) * (coordinate_dofs[0] - coordinate_dofs[3]);
    sp[379] = (coordinate_dofs[1] - coordinate_dofs[4]) * (coordinate_dofs[1] - coordinate_dofs[4]);
    sp[380] = sp[378] + sp[379];
    sp[381] = (coordinate_dofs[2] - coordinate_dofs[5]) * (coordinate_dofs[2] - coordinate_dofs[5]);
    sp[382] = sp[380] + sp[381];
    sp[383] = std::max(sp[377], sp[382]);
    sp[384] = std::sqrt(sp[383]);
    sp[385] = sp[253] * sp[384];
    sp[386] = sp[254] * sp[384];
    sp[387] = sp[255] * sp[384];
    sp[388] = sp[256] * sp[384];
    sp[389] = sp[257] * sp[384];
    sp[390] = sp[258] * sp[384];
    sp[391] = sp[295] * sp[384];
    sp[392] = sp[304] * sp[384];
    sp[393] = sp[313] * sp[384];
    sp[394] = sp[322] * sp[384];
    sp[395] = sp[331] * sp[384];
    sp[396] = sp[340] * sp[384];
    sp[397] = sp[296] * sp[384];
    sp[398] = sp[305] * sp[384];
    sp[399] = sp[314] * sp[384];
    sp[400] = sp[323] * sp[384];
    sp[401] = sp[332] * sp[384];
    sp[402] = sp[341] * sp[384];
    sp[403] = sp[297] * sp[384];
    sp[404] = sp[306] * sp[384];
    sp[405] = sp[315] * sp[384];
    sp[406] = sp[324] * sp[384];
    sp[407] = sp[333] * sp[384];
    sp[408] = sp[342] * sp[384];
    sp[409] = sp[271] * sp[384];
    sp[410] = sp[280] * sp[384];
    sp[411] = sp[289] * sp[384];
    sp[412] = sp[325] * sp[384];
    sp[413] = sp[334] * sp[384];
    sp[414] = sp[343] * sp[384];
    sp[415] = sp[272] * sp[384];
    sp[416] = sp[281] * sp[384];
    sp[417] = sp[290] * sp[384];
    sp[418] = sp[326] * sp[384];
    sp[419] = sp[335] * sp[384];
    sp[420] = sp[344] * sp[384];
    sp[421] = sp[273] * sp[384];
    sp[422] = sp[282] * sp[384];
    sp[423] = sp[291] * sp[384];
    sp[424] = sp[327] * sp[384];
    sp[425] = sp[336] * sp[384];
    sp[426] = sp[345] * sp[384];
    sp[427] = sp[274] * sp[384];
    sp[428] = sp[283] * sp[384];
    sp[429] = sp[292] * sp[384];
    sp[430] = sp[301] * sp[384];
    sp[431] = sp[310] * sp[384];
    sp[432] = sp[319] * sp[384];
    sp[433] = sp[275] * sp[384];
    sp[434] = sp[284] * sp[384];
    sp[435] = sp[293] * sp[384];
    sp[436] = sp[302] * sp[384];
    sp[437] = sp[311] * sp[384];
    sp[438] = sp[320] * sp[384];
    sp[439] = sp[276] * sp[384];
    sp[440] = sp[285] * sp[384];
    sp[441] = sp[294] * sp[384];
    sp[442] = sp[303] * sp[384];
    sp[443] = sp[312] * sp[384];
    sp[444] = sp[321] * sp[384];
    sp[445] = sp[259] * sp[384];
    sp[446] = sp[260] * sp[384];
    sp[447] = sp[261] * sp[384];
    sp[448] = sp[262] * sp[384];
    sp[449] = sp[263] * sp[384];
    sp[450] = sp[264] * sp[384];
    sp[451] = sp[265] * sp[384];
    sp[452] = sp[266] * sp[384];
    sp[453] = sp[267] * sp[384];
    sp[454] = sp[298] + sp[268];
    sp[455] = sp[307] + sp[277];
    sp[456] = sp[286] + sp[316];
    sp[457] = sp[299] + sp[269];
    sp[458] = sp[308] + sp[278];
    sp[459] = sp[287] + sp[317];
    sp[460] = sp[300] + sp[270];
    sp[461] = sp[309] + sp[279];
    sp[462] = sp[288] + sp[318];
    sp[463] = sp[454] + sp[328];
    sp[464] = sp[455] + sp[337];
    sp[465] = sp[456] + sp[346];
    sp[466] = sp[457] + sp[329];
    sp[467] = sp[458] + sp[338];
    sp[468] = sp[459] + sp[347];
    sp[469] = sp[460] + sp[330];
    sp[470] = sp[461] + sp[339];
    sp[471] = sp[462] + sp[348];
    sp[472] = sp[463] * w[4][0];
    sp[473] = sp[464] * w[4][0];
    sp[474] = sp[465] * w[4][0];
    sp[475] = sp[466] * w[4][0];
    sp[476] = sp[467] * w[4][0];
    sp[477] = sp[468] * w[4][0];
    sp[478] = sp[469] * w[4][0];
    sp[479] = sp[470] * w[4][0];
    sp[480] = sp[471] * w[4][0];
    sp[481] = sp[65] + 1 / w[3][0];
    sp[482] = sp[141] + 1 / w[3][0];
    sp[483] = sp[232] + 1 / w[3][0];
    sp[484] = std::abs(sp[13]);
    sp[485] = sp[14] * sp[484];
    sp[486] = sp[17] * sp[484];
    sp[487] = sp[18] * sp[484];
    sp[488] = sp[481] * sp[484];
    sp[489] = sp[79] * sp[484];
    sp[490] = sp[93] * sp[484];
    sp[491] = sp[22] * sp[484];
    sp[492] = sp[34] * sp[484];
    sp[493] = sp[385] * sp[484];
    sp[494] = sp[386] * sp[484];
    sp[495] = sp[387] * sp[484];
    sp[496] = sp[26] * sp[484];
    sp[497] = sp[38] * sp[484];
    sp[498] = sp[388] * sp[484];
    sp[499] = sp[389] * sp[484];
    sp[500] = sp[30] * sp[484];
    sp[501] = sp[42] * sp[484];
    sp[502] = sp[390] * sp[484];
    sp[503] = sp[127] * sp[484];
    sp[504] = sp[482] * sp[484];
    sp[505] = sp[155] * sp[484];
    sp[506] = sp[204] * sp[484];
    sp[507] = sp[218] * sp[484];
    sp[508] = sp[483] * sp[484];
    sp[509] = sp[43] * sp[484];
    sp[510] = sp[44] * sp[484];
    sp[511] = sp[45] * sp[484];
    sp[512] = sp[46] * sp[484];
    sp[513] = sp[47] * sp[484];
    sp[514] = sp[48] * sp[484];
    sp[515] = sp[49] * sp[484];
    sp[516] = sp[50] * sp[484];
    sp[517] = sp[51] * sp[484];
    sp[518] = sp[391] * sp[484];
    sp[519] = sp[392] * sp[484];
    sp[520] = sp[393] * sp[484];
    sp[521] = sp[394] * sp[484];
    sp[522] = sp[395] * sp[484];
    sp[523] = sp[396] * sp[484];
    sp[524] = sp[397] * sp[484];
    sp[525] = sp[398] * sp[484];
    sp[526] = sp[399] * sp[484];
    sp[527] = sp[400] * sp[484];
    sp[528] = sp[401] * sp[484];
    sp[529] = sp[402] * sp[484];
    sp[530] = sp[403] * sp[484];
    sp[531] = sp[404] * sp[484];
    sp[532] = sp[405] * sp[484];
    sp[533] = sp[406] * sp[484];
    sp[534] = sp[407] * sp[484];
    sp[535] = sp[408] * sp[484];
    sp[536] = sp[409] * sp[484];
    sp[537] = sp[410] * sp[484];
    sp[538] = sp[411] * sp[484];
    sp[539] = sp[412] * sp[484];
    sp[540] = sp[413] * sp[484];
    sp[541] = sp[414] * sp[484];
    sp[542] = sp[415] * sp[484];
    sp[543] = sp[416] * sp[484];
    sp[544] = sp[417] * sp[484];
    sp[545] = sp[418] * sp[484];
    sp[546] = sp[419] * sp[484];
    sp[547] = sp[420] * sp[484];
    sp[548] = sp[421] * sp[484];
    sp[549] = sp[422] * sp[484];
    sp[550] = sp[423] * sp[484];
    sp[551] = sp[424] * sp[484];
    sp[552] = sp[425] * sp[484];
    sp[553] = sp[426] * sp[484];
    sp[554] = sp[427] * sp[484];
    sp[555] = sp[428] * sp[484];
    sp[556] = sp[429] * sp[484];
    sp[557] = sp[430] * sp[484];
    sp[558] = sp[431] * sp[484];
    sp[559] = sp[432] * sp[484];
    sp[560] = sp[433] * sp[484];
    sp[561] = sp[434] * sp[484];
    sp[562] = sp[435] * sp[484];
    sp[563] = sp[436] * sp[484];
    sp[564] = sp[437] * sp[484];
    sp[565] = sp[438] * sp[484];
    sp[566] = sp[439] * sp[484];
    sp[567] = sp[440] * sp[484];
    sp[568] = sp[441] * sp[484];
    sp[569] = sp[442] * sp[484];
    sp[570] = sp[443] * sp[484];
    sp[571] = sp[444] * sp[484];
    sp[572] = sp[445] * sp[484];
    sp[573] = sp[446] * sp[484];
    sp[574] = sp[447] * sp[484];
    sp[575] = sp[448] * sp[484];
    sp[576] = sp[449] * sp[484];
    sp[577] = sp[450] * sp[484];
    sp[578] = sp[451] * sp[484];
    sp[579] = sp[452] * sp[484];
    sp[580] = sp[453] * sp[484];
    alignas(32) double TP0[2] = {};
    alignas(32) double TP1[4] = {};
    alignas(32) double TP2[2] = {};
    alignas(32) double TP3[2] = {};
    alignas(32) double TP4[4] = {};
    alignas(32) double TP5[4] = {};
    alignas(32) double TP6[2] = {};
    alignas(32) double TP7[2] = {};
    alignas(32) double TP8[2] = {};
    alignas(32) double TP9[4] = {};
    alignas(32) double TP10[4] = {};
    alignas(32) double TP11[4] = {};
    alignas(32) double TP12[2] = {};
    alignas(32) double TP13[4] = {};
    alignas(32) double TP14[2] = {};
    alignas(32) double TP15[2] = {};
    alignas(32) double TP16[4] = {};
    alignas(32) double TP17[4] = {};
    alignas(32) double TP18[2] = {};
    alignas(32) double TP19[2] = {};
    alignas(32) double TP20[2] = {};
    alignas(32) double TP21[2] = {};
    alignas(32) double TP22[4] = {};
    alignas(32) double TP23[2] = {};
    alignas(32) double TP24[2] = {};
    alignas(32) double TP25[4] = {};
    alignas(32) double TP26[4] = {};
    alignas(32) double TP27[2] = {};
    alignas(32) double TP28[2] = {};
    alignas(32) double TP29[2] = {};
    alignas(32) double TP30[4] = {};
    alignas(32) double TP31[2] = {};
    alignas(32) double TP32[4] = {};
    alignas(32) double TP33[2] = {};
    alignas(32) double TP34[2] = {};
    alignas(32) double TP35[4] = {};
    alignas(32) double TP36[2] = {};
    alignas(32) double TP37[2] = {};
    alignas(32) double TP38[2] = {};
    alignas(32) double TP39[4] = {};
    alignas(32) double TP40[2] = {};
    alignas(32) double TP41[4] = {};
    alignas(32) double TP42[2] = {};
    alignas(32) double TP43[2] = {};
    alignas(32) double TP44[4] = {};
    alignas(32) double TP45[2] = {};
    alignas(32) double TP46[2] = {};
    alignas(32) double TP47[2] = {};
    alignas(32) double TP48[4] = {};
    alignas(32) double TP49[2] = {};
    alignas(32) double TP50[4] = {};
    alignas(32) double TP51[2] = {};
    alignas(32) double TP52[2] = {};
    alignas(32) double TP53[4] = {};
    alignas(32) double TP54[2] = {};
    alignas(32) double TP55[2] = {};
    alignas(32) double TP56[2] = {};
    alignas(32) double TP57[4] = {};
    alignas(32) double TP58[4] = {};
    alignas(32) double TP59[2] = {};
    alignas(32) double TP60[4] = {};
    alignas(32) double TP61[2] = {};
    alignas(32) double TP62[2] = {};
    alignas(32) double TP63[2] = {};
    alignas(32) double TP64[2] = {};
    alignas(32) double TP65[2] = {};
    alignas(32) double TP66[4] = {};
    alignas(32) double TP67[4] = {};
    alignas(32) double TP68[2] = {};
    alignas(32) double TP69[4] = {};
    alignas(32) double TP70[2] = {};
    alignas(32) double TP71[2] = {};
    alignas(32) double TP72[2] = {};
    alignas(32) double TP73[2] = {};
    alignas(32) double TP74[2] = {};
    alignas(32) double TP75[4] = {};
    alignas(32) double TP76[4] = {};
    alignas(32) double TP77[2] = {};
    alignas(32) double TP78[4] = {};
    alignas(32) double TP79[2] = {};
    alignas(32) double TP80[2] = {};
    alignas(32) double TP81[2] = {};
    alignas(32) double TP82[2] = {};
    alignas(32) double TP83[2] = {};
    alignas(32) double TP84[2] = {};
    alignas(32) double TP85[2] = {};
    alignas(32) double TP86[2] = {};
    alignas(32) double TP87[2] = {};
    alignas(32) double TP88[2] = {};
    alignas(32) double TP89[2] = {};
    alignas(32) double TP90[2] = {};
    alignas(32) double TP91[2] = {};
    alignas(32) double TP92[2] = {};
    alignas(32) double TP93[2] = {};
    alignas(32) double TP94[2] = {};
    alignas(32) double TP95[2] = {};
    alignas(32) double TP96[2] = {};
    alignas(32) double TP97[2] = {};
    alignas(32) double TP98[2] = {};
    alignas(32) double TP99[2] = {};
    alignas(32) double TP100[2] = {};
    alignas(32) double TP101[2] = {};
    alignas(32) double TP102[2] = {};
    alignas(32) double TP103[2] = {};
    alignas(32) double TP104[2] = {};
    alignas(32) double TP105[2] = {};
    alignas(32) double TP106[2] = {};
    alignas(32) double TP107[2] = {};
    alignas(32) double TP108[2] = {};
    alignas(32) double TP109[2] = {};
    alignas(32) double TP110[2] = {};
    for (int iq = 0; iq < 216; ++iq)
    {
        // Quadrature loop body setup (num_points=216)
        // Unstructured varying computations for num_points=216
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE57_C0_Q216[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE57_C0_Q216[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE57_C0_Q216[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE57_C0_Q216[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE57_C0_Q216[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE57_C0_Q216[0][iq][ic];
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c0 += w[2][ic] * FE57_C0_Q216[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c1 += w[2][ic + 4] * FE57_C0_Q216[0][iq][ic];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c2 += w[2][ic + 8] * FE57_C0_Q216[0][iq][ic];
        alignas(32) double sv216[477];
        sv216[0] = w1_c0 * (1.0 + -1 * w[5][0]);
        sv216[1] = w0_c0 * w[5][0];
        sv216[2] = sv216[0] + sv216[1];
        sv216[3] = sv216[2] * sp[14];
        sv216[4] = sv216[2] * sp[17];
        sv216[5] = sv216[2] * sp[18];
        sv216[6] = w1_c1 * (1.0 + -1 * w[5][0]);
        sv216[7] = w0_c1 * w[5][0];
        sv216[8] = sv216[6] + sv216[7];
        sv216[9] = sv216[8] * sp[22];
        sv216[10] = sv216[8] * sp[26];
        sv216[11] = sv216[8] * sp[30];
        sv216[12] = sv216[9] + sv216[3];
        sv216[13] = sv216[10] + sv216[4];
        sv216[14] = sv216[5] + sv216[11];
        sv216[15] = w1_c2 * (1.0 + -1 * w[5][0]);
        sv216[16] = w0_c2 * w[5][0];
        sv216[17] = sv216[15] + sv216[16];
        sv216[18] = sv216[17] * sp[34];
        sv216[19] = sv216[17] * sp[38];
        sv216[20] = sv216[17] * sp[42];
        sv216[21] = sv216[12] + sv216[18];
        sv216[22] = sv216[13] + sv216[19];
        sv216[23] = sv216[14] + sv216[20];
        sv216[24] = sv216[2] * sp[43];
        sv216[25] = sv216[2] * sp[44];
        sv216[26] = sv216[2] * sp[45];
        sv216[27] = sv216[8] * sp[46];
        sv216[28] = sv216[8] * sp[47];
        sv216[29] = sv216[8] * sp[48];
        sv216[30] = sv216[27] + sv216[24];
        sv216[31] = sv216[28] + sv216[25];
        sv216[32] = sv216[26] + sv216[29];
        sv216[33] = sv216[17] * sp[49];
        sv216[34] = sv216[17] * sp[50];
        sv216[35] = sv216[17] * sp[51];
        sv216[36] = sv216[30] + sv216[33];
        sv216[37] = sv216[31] + sv216[34];
        sv216[38] = sv216[32] + sv216[35];
        sv216[39] = sv216[21] * sp[14];
        sv216[40] = sv216[21] * sp[17];
        sv216[41] = sv216[21] * sp[18];
        sv216[42] = sv216[36] * sv216[21];
        sv216[43] = sv216[37] * sv216[21];
        sv216[44] = sv216[38] * sv216[21];
        sv216[45] = sv216[21] * sp[65];
        sv216[46] = sv216[21] * sp[79];
        sv216[47] = sv216[21] * sp[93];
        sv216[48] = sv216[22] * sp[14];
        sv216[49] = sv216[22] * sp[17];
        sv216[50] = sv216[22] * sp[18];
        sv216[51] = sv216[36] * sv216[22];
        sv216[52] = sv216[37] * sv216[22];
        sv216[53] = sv216[38] * sv216[22];
        sv216[54] = sv216[22] * sp[65];
        sv216[55] = sv216[22] * sp[79];
        sv216[56] = sv216[22] * sp[93];
        sv216[57] = sv216[23] * sp[14];
        sv216[58] = sv216[23] * sp[17];
        sv216[59] = sv216[23] * sp[18];
        sv216[60] = sv216[36] * sv216[23];
        sv216[61] = sv216[37] * sv216[23];
        sv216[62] = sv216[38] * sv216[23];
        sv216[63] = sv216[23] * sp[65];
        sv216[64] = sv216[23] * sp[79];
        sv216[65] = sv216[23] * sp[93];
        sv216[66] = sv216[36] * sp[14];
        sv216[67] = sv216[37] * sp[14];
        sv216[68] = sv216[38] * sp[14];
        sv216[69] = sv216[36] * sp[17];
        sv216[70] = sv216[37] * sp[17];
        sv216[71] = sv216[38] * sp[17];
        sv216[72] = sv216[36] * sp[18];
        sv216[73] = sv216[37] * sp[18];
        sv216[74] = sv216[38] * sp[18];
        sv216[75] = sv216[2] * sp[64];
        sv216[76] = sv216[8] * sp[78];
        sv216[77] = sv216[75] + sv216[76];
        sv216[78] = sv216[17] * sp[92];
        sv216[79] = sv216[77] + sv216[78];
        sv216[80] = sv216[79] + sp[113];
        sv216[81] = sv216[80] + -1 * w2_c0;
        sv216[82] = sv216[81] * sp[43];
        sv216[83] = sv216[81] * sp[46];
        sv216[84] = sv216[81] * sp[49];
        sv216[85] = sv216[81] * sp[44];
        sv216[86] = sv216[81] * sp[47];
        sv216[87] = sv216[81] * sp[50];
        sv216[88] = sv216[81] * sp[45];
        sv216[89] = sv216[81] * sp[48];
        sv216[90] = sv216[81] * sp[51];
        sv216[91] = sv216[45] + sv216[82];
        sv216[92] = sv216[46] + sv216[83];
        sv216[93] = sv216[47] + sv216[84];
        sv216[94] = sv216[54] + sv216[85];
        sv216[95] = sv216[55] + sv216[86];
        sv216[96] = sv216[56] + sv216[87];
        sv216[97] = sv216[63] + sv216[88];
        sv216[98] = sv216[64] + sv216[89];
        sv216[99] = sv216[65] + sv216[90];
        sv216[100] = sv216[36] * sp[22];
        sv216[101] = sv216[37] * sp[22];
        sv216[102] = sv216[38] * sp[22];
        sv216[103] = sv216[36] * sp[26];
        sv216[104] = sv216[37] * sp[26];
        sv216[105] = sv216[38] * sp[26];
        sv216[106] = sv216[36] * sp[30];
        sv216[107] = sv216[37] * sp[30];
        sv216[108] = sv216[38] * sp[30];
        sv216[109] = sv216[21] * sp[22];
        sv216[110] = sv216[21] * sp[26];
        sv216[111] = sv216[21] * sp[30];
        sv216[112] = sv216[21] * sp[127];
        sv216[113] = sv216[21] * sp[141];
        sv216[114] = sv216[21] * sp[155];
        sv216[115] = sv216[22] * sp[22];
        sv216[116] = sv216[22] * sp[26];
        sv216[117] = sv216[22] * sp[30];
        sv216[118] = sv216[22] * sp[127];
        sv216[119] = sv216[22] * sp[141];
        sv216[120] = sv216[22] * sp[155];
        sv216[121] = sv216[23] * sp[22];
        sv216[122] = sv216[23] * sp[26];
        sv216[123] = sv216[23] * sp[30];
        sv216[124] = sv216[23] * sp[127];
        sv216[125] = sv216[23] * sp[141];
        sv216[126] = sv216[23] * sp[155];
        sv216[127] = sv216[2] * sp[126];
        sv216[128] = sv216[8] * sp[140];
        sv216[129] = sv216[127] + sv216[128];
        sv216[130] = sv216[17] * sp[154];
        sv216[131] = sv216[129] + sv216[130];
        sv216[132] = sv216[131] + sp[175];
        sv216[133] = sv216[132] + -1 * w2_c1;
        sv216[134] = sv216[133] * sp[43];
        sv216[135] = sv216[133] * sp[44];
        sv216[136] = sv216[133] * sp[45];
        sv216[137] = sv216[133] * sp[46];
        sv216[138] = sv216[133] * sp[47];
        sv216[139] = sv216[133] * sp[48];
        sv216[140] = sv216[133] * sp[49];
        sv216[141] = sv216[133] * sp[50];
        sv216[142] = sv216[133] * sp[51];
        sv216[143] = sv216[112] + sv216[134];
        sv216[144] = sv216[118] + sv216[135];
        sv216[145] = sv216[124] + sv216[136];
        sv216[146] = sv216[113] + sv216[137];
        sv216[147] = sv216[119] + sv216[138];
        sv216[148] = sv216[125] + sv216[139];
        sv216[149] = sv216[114] + sv216[140];
        sv216[150] = sv216[120] + sv216[141];
        sv216[151] = sv216[126] + sv216[142];
        sv216[152] = sv216[36] * sp[34];
        sv216[153] = sv216[37] * sp[34];
        sv216[154] = sv216[38] * sp[34];
        sv216[155] = sv216[36] * sp[38];
        sv216[156] = sv216[37] * sp[38];
        sv216[157] = sv216[38] * sp[38];
        sv216[158] = sv216[36] * sp[42];
        sv216[159] = sv216[37] * sp[42];
        sv216[160] = sv216[38] * sp[42];
        sv216[161] = sv216[21] * sp[34];
        sv216[162] = sv216[21] * sp[38];
        sv216[163] = sv216[21] * sp[42];
        sv216[164] = sv216[21] * sp[204];
        sv216[165] = sv216[21] * sp[218];
        sv216[166] = sv216[21] * sp[232];
        sv216[167] = sv216[22] * sp[34];
        sv216[168] = sv216[22] * sp[38];
        sv216[169] = sv216[22] * sp[42];
        sv216[170] = sv216[22] * sp[204];
        sv216[171] = sv216[22] * sp[218];
        sv216[172] = sv216[22] * sp[232];
        sv216[173] = sv216[23] * sp[34];
        sv216[174] = sv216[23] * sp[38];
        sv216[175] = sv216[23] * sp[42];
        sv216[176] = sv216[23] * sp[204];
        sv216[177] = sv216[23] * sp[218];
        sv216[178] = sv216[23] * sp[232];
        sv216[179] = sv216[2] * sp[203];
        sv216[180] = sv216[8] * sp[217];
        sv216[181] = sv216[179] + sv216[180];
        sv216[182] = sv216[17] * sp[231];
        sv216[183] = sv216[181] + sv216[182];
        sv216[184] = sv216[183] + sp[252];
        sv216[185] = sv216[184] + -1 * w2_c2;
        sv216[186] = sv216[185] * sp[43];
        sv216[187] = sv216[185] * sp[44];
        sv216[188] = sv216[185] * sp[45];
        sv216[189] = sv216[185] * sp[46];
        sv216[190] = sv216[185] * sp[47];
        sv216[191] = sv216[185] * sp[48];
        sv216[192] = sv216[185] * sp[49];
        sv216[193] = sv216[185] * sp[50];
        sv216[194] = sv216[185] * sp[51];
        sv216[195] = sv216[164] + sv216[186];
        sv216[196] = sv216[170] + sv216[187];
        sv216[197] = sv216[176] + sv216[188];
        sv216[198] = sv216[165] + sv216[189];
        sv216[199] = sv216[171] + sv216[190];
        sv216[200] = sv216[177] + sv216[191];
        sv216[201] = sv216[166] + sv216[192];
        sv216[202] = sv216[172] + sv216[193];
        sv216[203] = sv216[178] + sv216[194];
        sv216[204] = sv216[42] + sp[268];
        sv216[205] = sv216[51] + sp[277];
        sv216[206] = sv216[60] + sp[286];
        sv216[207] = sv216[43] + sp[269];
        sv216[208] = sv216[52] + sp[278];
        sv216[209] = sv216[61] + sp[287];
        sv216[210] = sv216[44] + sp[270];
        sv216[211] = sv216[53] + sp[279];
        sv216[212] = sv216[62] + sp[288];
        sv216[213] = sv216[42] + sp[298];
        sv216[214] = sv216[51] + sp[307];
        sv216[215] = sv216[60] + sp[316];
        sv216[216] = sv216[43] + sp[299];
        sv216[217] = sv216[52] + sp[308];
        sv216[218] = sv216[61] + sp[317];
        sv216[219] = sv216[44] + sp[300];
        sv216[220] = sv216[53] + sp[309];
        sv216[221] = sv216[62] + sp[318];
        sv216[222] = sv216[42] + sp[328];
        sv216[223] = sv216[51] + sp[337];
        sv216[224] = sv216[60] + sp[346];
        sv216[225] = sv216[43] + sp[329];
        sv216[226] = sv216[52] + sp[338];
        sv216[227] = sv216[61] + sp[347];
        sv216[228] = sv216[44] + sp[330];
        sv216[229] = sv216[53] + sp[339];
        sv216[230] = sv216[62] + sp[348];
        sv216[231] = sv216[39] * sp[384];
        sv216[232] = sv216[48] * sp[384];
        sv216[233] = sv216[57] * sp[384];
        sv216[234] = sv216[109] * sp[384];
        sv216[235] = sv216[115] * sp[384];
        sv216[236] = sv216[121] * sp[384];
        sv216[237] = sv216[161] * sp[384];
        sv216[238] = sv216[167] * sp[384];
        sv216[239] = sv216[173] * sp[384];
        sv216[240] = sv216[40] * sp[384];
        sv216[241] = sv216[49] * sp[384];
        sv216[242] = sv216[58] * sp[384];
        sv216[243] = sv216[110] * sp[384];
        sv216[244] = sv216[116] * sp[384];
        sv216[245] = sv216[122] * sp[384];
        sv216[246] = sv216[162] * sp[384];
        sv216[247] = sv216[168] * sp[384];
        sv216[248] = sv216[174] * sp[384];
        sv216[249] = sv216[41] * sp[384];
        sv216[250] = sv216[50] * sp[384];
        sv216[251] = sv216[59] * sp[384];
        sv216[252] = sv216[111] * sp[384];
        sv216[253] = sv216[117] * sp[384];
        sv216[254] = sv216[123] * sp[384];
        sv216[255] = sv216[163] * sp[384];
        sv216[256] = sv216[169] * sp[384];
        sv216[257] = sv216[175] * sp[384];
        sv216[258] = sv216[204] * sp[384];
        sv216[259] = sv216[205] * sp[384];
        sv216[260] = sv216[206] * sp[384];
        sv216[261] = sv216[66] * sp[384];
        sv216[262] = sv216[69] * sp[384];
        sv216[263] = sv216[72] * sp[384];
        sv216[264] = sv216[207] * sp[384];
        sv216[265] = sv216[208] * sp[384];
        sv216[266] = sv216[209] * sp[384];
        sv216[267] = sv216[67] * sp[384];
        sv216[268] = sv216[70] * sp[384];
        sv216[269] = sv216[73] * sp[384];
        sv216[270] = sv216[210] * sp[384];
        sv216[271] = sv216[211] * sp[384];
        sv216[272] = sv216[212] * sp[384];
        sv216[273] = sv216[68] * sp[384];
        sv216[274] = sv216[71] * sp[384];
        sv216[275] = sv216[74] * sp[384];
        sv216[276] = sv216[100] * sp[384];
        sv216[277] = sv216[103] * sp[384];
        sv216[278] = sv216[106] * sp[384];
        sv216[279] = sv216[213] * sp[384];
        sv216[280] = sv216[214] * sp[384];
        sv216[281] = sv216[215] * sp[384];
        sv216[282] = sv216[101] * sp[384];
        sv216[283] = sv216[104] * sp[384];
        sv216[284] = sv216[107] * sp[384];
        sv216[285] = sv216[216] * sp[384];
        sv216[286] = sv216[217] * sp[384];
        sv216[287] = sv216[218] * sp[384];
        sv216[288] = sv216[102] * sp[384];
        sv216[289] = sv216[105] * sp[384];
        sv216[290] = sv216[108] * sp[384];
        sv216[291] = sv216[219] * sp[384];
        sv216[292] = sv216[220] * sp[384];
        sv216[293] = sv216[221] * sp[384];
        sv216[294] = sv216[152] * sp[384];
        sv216[295] = sv216[155] * sp[384];
        sv216[296] = sv216[158] * sp[384];
        sv216[297] = sv216[222] * sp[384];
        sv216[298] = sv216[223] * sp[384];
        sv216[299] = sv216[224] * sp[384];
        sv216[300] = sv216[153] * sp[384];
        sv216[301] = sv216[156] * sp[384];
        sv216[302] = sv216[159] * sp[384];
        sv216[303] = sv216[225] * sp[384];
        sv216[304] = sv216[226] * sp[384];
        sv216[305] = sv216[227] * sp[384];
        sv216[306] = sv216[154] * sp[384];
        sv216[307] = sv216[157] * sp[384];
        sv216[308] = sv216[160] * sp[384];
        sv216[309] = sv216[228] * sp[384];
        sv216[310] = sv216[229] * sp[384];
        sv216[311] = sv216[230] * sp[384];
        sv216[312] = sv216[91] * sp[384];
        sv216[313] = sv216[92] * sp[384];
        sv216[314] = sv216[93] * sp[384];
        sv216[315] = sv216[94] * sp[384];
        sv216[316] = sv216[95] * sp[384];
        sv216[317] = sv216[96] * sp[384];
        sv216[318] = sv216[97] * sp[384];
        sv216[319] = sv216[98] * sp[384];
        sv216[320] = sv216[99] * sp[384];
        sv216[321] = sv216[143] * sp[384];
        sv216[322] = sv216[144] * sp[384];
        sv216[323] = sv216[145] * sp[384];
        sv216[324] = sv216[195] * sp[384];
        sv216[325] = sv216[196] * sp[384];
        sv216[326] = sv216[197] * sp[384];
        sv216[327] = sv216[146] * sp[384];
        sv216[328] = sv216[147] * sp[384];
        sv216[329] = sv216[148] * sp[384];
        sv216[330] = sv216[198] * sp[384];
        sv216[331] = sv216[199] * sp[384];
        sv216[332] = sv216[200] * sp[384];
        sv216[333] = sv216[149] * sp[384];
        sv216[334] = sv216[150] * sp[384];
        sv216[335] = sv216[151] * sp[384];
        sv216[336] = sv216[201] * sp[384];
        sv216[337] = sv216[202] * sp[384];
        sv216[338] = sv216[203] * sp[384];
        sv216[339] = sv216[258] + sp[472];
        sv216[340] = sv216[259] + sp[473];
        sv216[341] = sv216[260] + sp[474];
        sv216[342] = sv216[264] + sp[475];
        sv216[343] = sv216[265] + sp[476];
        sv216[344] = sv216[266] + sp[477];
        sv216[345] = sv216[270] + sp[478];
        sv216[346] = sv216[271] + sp[479];
        sv216[347] = sv216[272] + sp[480];
        sv216[348] = sv216[279] + sp[472];
        sv216[349] = sv216[280] + sp[473];
        sv216[350] = sv216[281] + sp[474];
        sv216[351] = sv216[285] + sp[475];
        sv216[352] = sv216[286] + sp[476];
        sv216[353] = sv216[287] + sp[477];
        sv216[354] = sv216[291] + sp[478];
        sv216[355] = sv216[292] + sp[479];
        sv216[356] = sv216[293] + sp[480];
        sv216[357] = sv216[297] + sp[472];
        sv216[358] = sv216[298] + sp[473];
        sv216[359] = sv216[299] + sp[474];
        sv216[360] = sv216[303] + sp[475];
        sv216[361] = sv216[304] + sp[476];
        sv216[362] = sv216[305] + sp[477];
        sv216[363] = sv216[309] + sp[478];
        sv216[364] = sv216[310] + sp[479];
        sv216[365] = sv216[311] + sp[480];
        sv216[366] = sv216[36] * sp[484];
        sv216[367] = sv216[37] * sp[484];
        sv216[368] = sv216[38] * sp[484];
        sv216[369] = sv216[231] * sp[484];
        sv216[370] = sv216[232] * sp[484];
        sv216[371] = sv216[233] * sp[484];
        sv216[372] = sv216[234] * sp[484];
        sv216[373] = sv216[235] * sp[484];
        sv216[374] = sv216[236] * sp[484];
        sv216[375] = sv216[237] * sp[484];
        sv216[376] = sv216[238] * sp[484];
        sv216[377] = sv216[239] * sp[484];
        sv216[378] = sv216[240] * sp[484];
        sv216[379] = sv216[241] * sp[484];
        sv216[380] = sv216[242] * sp[484];
        sv216[381] = sv216[243] * sp[484];
        sv216[382] = sv216[244] * sp[484];
        sv216[383] = sv216[245] * sp[484];
        sv216[384] = sv216[246] * sp[484];
        sv216[385] = sv216[247] * sp[484];
        sv216[386] = sv216[248] * sp[484];
        sv216[387] = sv216[249] * sp[484];
        sv216[388] = sv216[250] * sp[484];
        sv216[389] = sv216[251] * sp[484];
        sv216[390] = sv216[252] * sp[484];
        sv216[391] = sv216[253] * sp[484];
        sv216[392] = sv216[254] * sp[484];
        sv216[393] = sv216[255] * sp[484];
        sv216[394] = sv216[256] * sp[484];
        sv216[395] = sv216[257] * sp[484];
        sv216[396] = sv216[339] * sp[484];
        sv216[397] = sv216[340] * sp[484];
        sv216[398] = sv216[341] * sp[484];
        sv216[399] = sv216[261] * sp[484];
        sv216[400] = sv216[262] * sp[484];
        sv216[401] = sv216[263] * sp[484];
        sv216[402] = sv216[342] * sp[484];
        sv216[403] = sv216[343] * sp[484];
        sv216[404] = sv216[344] * sp[484];
        sv216[405] = sv216[267] * sp[484];
        sv216[406] = sv216[268] * sp[484];
        sv216[407] = sv216[269] * sp[484];
        sv216[408] = sv216[345] * sp[484];
        sv216[409] = sv216[346] * sp[484];
        sv216[410] = sv216[347] * sp[484];
        sv216[411] = sv216[273] * sp[484];
        sv216[412] = sv216[274] * sp[484];
        sv216[413] = sv216[275] * sp[484];
        sv216[414] = sv216[276] * sp[484];
        sv216[415] = sv216[277] * sp[484];
        sv216[416] = sv216[278] * sp[484];
        sv216[417] = sv216[348] * sp[484];
        sv216[418] = sv216[349] * sp[484];
        sv216[419] = sv216[350] * sp[484];
        sv216[420] = sv216[282] * sp[484];
        sv216[421] = sv216[283] * sp[484];
        sv216[422] = sv216[284] * sp[484];
        sv216[423] = sv216[351] * sp[484];
        sv216[424] = sv216[352] * sp[484];
        sv216[425] = sv216[353] * sp[484];
        sv216[426] = sv216[288] * sp[484];
        sv216[427] = sv216[289] * sp[484];
        sv216[428] = sv216[290] * sp[484];
        sv216[429] = sv216[354] * sp[484];
        sv216[430] = sv216[355] * sp[484];
        sv216[431] = sv216[356] * sp[484];
        sv216[432] = sv216[294] * sp[484];
        sv216[433] = sv216[295] * sp[484];
        sv216[434] = sv216[296] * sp[484];
        sv216[435] = sv216[357] * sp[484];
        sv216[436] = sv216[358] * sp[484];
        sv216[437] = sv216[359] * sp[484];
        sv216[438] = sv216[300] * sp[484];
        sv216[439] = sv216[301] * sp[484];
        sv216[440] = sv216[302] * sp[484];
        sv216[441] = sv216[360] * sp[484];
        sv216[442] = sv216[361] * sp[484];
        sv216[443] = sv216[362] * sp[484];
        sv216[444] = sv216[306] * sp[484];
        sv216[445] = sv216[307] * sp[484];
        sv216[446] = sv216[308] * sp[484];
        sv216[447] = sv216[363] * sp[484];
        sv216[448] = sv216[364] * sp[484];
        sv216[449] = sv216[365] * sp[484];
        sv216[450] = sv216[312] * sp[484];
        sv216[451] = sv216[313] * sp[484];
        sv216[452] = sv216[314] * sp[484];
        sv216[453] = sv216[315] * sp[484];
        sv216[454] = sv216[316] * sp[484];
        sv216[455] = sv216[317] * sp[484];
        sv216[456] = sv216[318] * sp[484];
        sv216[457] = sv216[319] * sp[484];
        sv216[458] = sv216[320] * sp[484];
        sv216[459] = sv216[321] * sp[484];
        sv216[460] = sv216[322] * sp[484];
        sv216[461] = sv216[323] * sp[484];
        sv216[462] = sv216[324] * sp[484];
        sv216[463] = sv216[325] * sp[484];
        sv216[464] = sv216[326] * sp[484];
        sv216[465] = sv216[327] * sp[484];
        sv216[466] = sv216[328] * sp[484];
        sv216[467] = sv216[329] * sp[484];
        sv216[468] = sv216[330] * sp[484];
        sv216[469] = sv216[331] * sp[484];
        sv216[470] = sv216[332] * sp[484];
        sv216[471] = sv216[333] * sp[484];
        sv216[472] = sv216[334] * sp[484];
        sv216[473] = sv216[335] * sp[484];
        sv216[474] = sv216[336] * sp[484];
        sv216[475] = sv216[337] * sp[484];
        sv216[476] = sv216[338] * sp[484];
        const double fw0 = sv216[396] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP0[j] += fw0 * FE57_C0_D001_Q216[0][0][j];
        const double fw1 = sv216[450] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP1[j] += fw1 * FE57_C0_Q216[0][iq][j];
        const double fw2 = sv216[402] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP2[j] += fw2 * FE57_C0_D001_Q216[0][0][j];
        const double fw3 = sv216[408] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP3[j] += fw3 * FE57_C0_D001_Q216[0][0][j];
        const double fw4 = sv216[451] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP4[j] += fw4 * FE57_C0_Q216[0][iq][j];
        const double fw5 = sv216[452] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP5[j] += fw5 * FE57_C0_Q216[0][iq][j];
        const double fw6 = sv216[369] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP6[j] += fw6 * FE57_C0_D001_Q216[0][0][j];
        const double fw7 = sv216[378] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP7[j] += fw7 * FE57_C0_D001_Q216[0][0][j];
        const double fw8 = sv216[387] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP8[j] += fw8 * FE57_C0_D001_Q216[0][0][j];
        const double fw9 = sv216[366] * weights216[iq];
        for (int i = 0; i < 4; ++i)
            TP9[i] += fw9 * FE57_C0_Q216[0][iq][i];
        const double fw10 = sv216[367] * weights216[iq];
        for (int i = 0; i < 4; ++i)
            TP10[i] += fw10 * FE57_C0_Q216[0][iq][i];
        const double fw11 = sv216[368] * weights216[iq];
        for (int i = 0; i < 4; ++i)
            TP11[i] += fw11 * FE57_C0_Q216[0][iq][i];
        const double fw12 = sv216[397] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP12[j] += fw12 * FE57_C0_D001_Q216[0][0][j];
        const double fw13 = sv216[453] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP13[j] += fw13 * FE57_C0_Q216[0][iq][j];
        const double fw14 = sv216[403] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP14[j] += fw14 * FE57_C0_D001_Q216[0][0][j];
        const double fw15 = sv216[409] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP15[j] += fw15 * FE57_C0_D001_Q216[0][0][j];
        const double fw16 = sv216[454] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP16[j] += fw16 * FE57_C0_Q216[0][iq][j];
        const double fw17 = sv216[455] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP17[j] += fw17 * FE57_C0_Q216[0][iq][j];
        const double fw18 = sv216[370] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP18[j] += fw18 * FE57_C0_D001_Q216[0][0][j];
        const double fw19 = sv216[379] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP19[j] += fw19 * FE57_C0_D001_Q216[0][0][j];
        const double fw20 = sv216[388] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP20[j] += fw20 * FE57_C0_D001_Q216[0][0][j];
        const double fw21 = sv216[398] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP21[j] += fw21 * FE57_C0_D001_Q216[0][0][j];
        const double fw22 = sv216[456] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP22[j] += fw22 * FE57_C0_Q216[0][iq][j];
        const double fw23 = sv216[404] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP23[j] += fw23 * FE57_C0_D001_Q216[0][0][j];
        const double fw24 = sv216[410] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP24[j] += fw24 * FE57_C0_D001_Q216[0][0][j];
        const double fw25 = sv216[457] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP25[j] += fw25 * FE57_C0_Q216[0][iq][j];
        const double fw26 = sv216[458] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP26[j] += fw26 * FE57_C0_Q216[0][iq][j];
        const double fw27 = sv216[371] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP27[j] += fw27 * FE57_C0_D001_Q216[0][0][j];
        const double fw28 = sv216[380] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP28[j] += fw28 * FE57_C0_D001_Q216[0][0][j];
        const double fw29 = sv216[389] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP29[j] += fw29 * FE57_C0_D001_Q216[0][0][j];
        const double fw30 = sv216[459] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP30[j] += fw30 * FE57_C0_Q216[0][iq][j];
        const double fw31 = sv216[417] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP31[j] += fw31 * FE57_C0_D001_Q216[0][0][j];
        const double fw32 = sv216[465] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP32[j] += fw32 * FE57_C0_Q216[0][iq][j];
        const double fw33 = sv216[423] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP33[j] += fw33 * FE57_C0_D001_Q216[0][0][j];
        const double fw34 = sv216[429] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP34[j] += fw34 * FE57_C0_D001_Q216[0][0][j];
        const double fw35 = sv216[471] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP35[j] += fw35 * FE57_C0_Q216[0][iq][j];
        const double fw36 = sv216[372] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP36[j] += fw36 * FE57_C0_D001_Q216[0][0][j];
        const double fw37 = sv216[381] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP37[j] += fw37 * FE57_C0_D001_Q216[0][0][j];
        const double fw38 = sv216[390] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP38[j] += fw38 * FE57_C0_D001_Q216[0][0][j];
        const double fw39 = sv216[460] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP39[j] += fw39 * FE57_C0_Q216[0][iq][j];
        const double fw40 = sv216[418] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP40[j] += fw40 * FE57_C0_D001_Q216[0][0][j];
        const double fw41 = sv216[466] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP41[j] += fw41 * FE57_C0_Q216[0][iq][j];
        const double fw42 = sv216[424] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP42[j] += fw42 * FE57_C0_D001_Q216[0][0][j];
        const double fw43 = sv216[430] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP43[j] += fw43 * FE57_C0_D001_Q216[0][0][j];
        const double fw44 = sv216[472] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP44[j] += fw44 * FE57_C0_Q216[0][iq][j];
        const double fw45 = sv216[373] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP45[j] += fw45 * FE57_C0_D001_Q216[0][0][j];
        const double fw46 = sv216[382] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP46[j] += fw46 * FE57_C0_D001_Q216[0][0][j];
        const double fw47 = sv216[391] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP47[j] += fw47 * FE57_C0_D001_Q216[0][0][j];
        const double fw48 = sv216[461] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP48[j] += fw48 * FE57_C0_Q216[0][iq][j];
        const double fw49 = sv216[419] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP49[j] += fw49 * FE57_C0_D001_Q216[0][0][j];
        const double fw50 = sv216[467] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP50[j] += fw50 * FE57_C0_Q216[0][iq][j];
        const double fw51 = sv216[425] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP51[j] += fw51 * FE57_C0_D001_Q216[0][0][j];
        const double fw52 = sv216[431] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP52[j] += fw52 * FE57_C0_D001_Q216[0][0][j];
        const double fw53 = sv216[473] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP53[j] += fw53 * FE57_C0_Q216[0][iq][j];
        const double fw54 = sv216[374] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP54[j] += fw54 * FE57_C0_D001_Q216[0][0][j];
        const double fw55 = sv216[383] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP55[j] += fw55 * FE57_C0_D001_Q216[0][0][j];
        const double fw56 = sv216[392] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP56[j] += fw56 * FE57_C0_D001_Q216[0][0][j];
        const double fw57 = sv216[462] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP57[j] += fw57 * FE57_C0_Q216[0][iq][j];
        const double fw58 = sv216[468] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP58[j] += fw58 * FE57_C0_Q216[0][iq][j];
        const double fw59 = sv216[435] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP59[j] += fw59 * FE57_C0_D001_Q216[0][0][j];
        const double fw60 = sv216[474] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP60[j] += fw60 * FE57_C0_Q216[0][iq][j];
        const double fw61 = sv216[441] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP61[j] += fw61 * FE57_C0_D001_Q216[0][0][j];
        const double fw62 = sv216[447] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP62[j] += fw62 * FE57_C0_D001_Q216[0][0][j];
        const double fw63 = sv216[375] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP63[j] += fw63 * FE57_C0_D001_Q216[0][0][j];
        const double fw64 = sv216[384] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP64[j] += fw64 * FE57_C0_D001_Q216[0][0][j];
        const double fw65 = sv216[393] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP65[j] += fw65 * FE57_C0_D001_Q216[0][0][j];
        const double fw66 = sv216[463] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP66[j] += fw66 * FE57_C0_Q216[0][iq][j];
        const double fw67 = sv216[469] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP67[j] += fw67 * FE57_C0_Q216[0][iq][j];
        const double fw68 = sv216[436] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP68[j] += fw68 * FE57_C0_D001_Q216[0][0][j];
        const double fw69 = sv216[475] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP69[j] += fw69 * FE57_C0_Q216[0][iq][j];
        const double fw70 = sv216[442] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP70[j] += fw70 * FE57_C0_D001_Q216[0][0][j];
        const double fw71 = sv216[448] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP71[j] += fw71 * FE57_C0_D001_Q216[0][0][j];
        const double fw72 = sv216[376] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP72[j] += fw72 * FE57_C0_D001_Q216[0][0][j];
        const double fw73 = sv216[385] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP73[j] += fw73 * FE57_C0_D001_Q216[0][0][j];
        const double fw74 = sv216[394] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP74[j] += fw74 * FE57_C0_D001_Q216[0][0][j];
        const double fw75 = sv216[464] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP75[j] += fw75 * FE57_C0_Q216[0][iq][j];
        const double fw76 = sv216[470] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP76[j] += fw76 * FE57_C0_Q216[0][iq][j];
        const double fw77 = sv216[437] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP77[j] += fw77 * FE57_C0_D001_Q216[0][0][j];
        const double fw78 = sv216[476] * weights216[iq];
        for (int j = 0; j < 4; ++j)
            TP78[j] += fw78 * FE57_C0_Q216[0][iq][j];
        const double fw79 = sv216[443] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP79[j] += fw79 * FE57_C0_D001_Q216[0][0][j];
        const double fw80 = sv216[449] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP80[j] += fw80 * FE57_C0_D001_Q216[0][0][j];
        const double fw81 = sv216[377] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP81[j] += fw81 * FE57_C0_D001_Q216[0][0][j];
        const double fw82 = sv216[386] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP82[j] += fw82 * FE57_C0_D001_Q216[0][0][j];
        const double fw83 = sv216[395] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP83[j] += fw83 * FE57_C0_D001_Q216[0][0][j];
        const double fw84 = sv216[399] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP84[j] += fw84 * FE57_C0_D001_Q216[0][0][j];
        const double fw85 = sv216[405] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP85[j] += fw85 * FE57_C0_D001_Q216[0][0][j];
        const double fw86 = sv216[411] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP86[j] += fw86 * FE57_C0_D001_Q216[0][0][j];
        const double fw87 = sv216[414] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP87[j] += fw87 * FE57_C0_D001_Q216[0][0][j];
        const double fw88 = sv216[420] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP88[j] += fw88 * FE57_C0_D001_Q216[0][0][j];
        const double fw89 = sv216[426] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP89[j] += fw89 * FE57_C0_D001_Q216[0][0][j];
        const double fw90 = sv216[432] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP90[j] += fw90 * FE57_C0_D001_Q216[0][0][j];
        const double fw91 = sv216[438] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP91[j] += fw91 * FE57_C0_D001_Q216[0][0][j];
        const double fw92 = sv216[444] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP92[j] += fw92 * FE57_C0_D001_Q216[0][0][j];
        const double fw93 = sv216[400] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP93[j] += fw93 * FE57_C0_D001_Q216[0][0][j];
        const double fw94 = sv216[406] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP94[j] += fw94 * FE57_C0_D001_Q216[0][0][j];
        const double fw95 = sv216[412] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP95[j] += fw95 * FE57_C0_D001_Q216[0][0][j];
        const double fw96 = sv216[415] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP96[j] += fw96 * FE57_C0_D001_Q216[0][0][j];
        const double fw97 = sv216[421] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP97[j] += fw97 * FE57_C0_D001_Q216[0][0][j];
        const double fw98 = sv216[427] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP98[j] += fw98 * FE57_C0_D001_Q216[0][0][j];
        const double fw99 = sv216[433] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP99[j] += fw99 * FE57_C0_D001_Q216[0][0][j];
        const double fw100 = sv216[439] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP100[j] += fw100 * FE57_C0_D001_Q216[0][0][j];
        const double fw101 = sv216[445] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP101[j] += fw101 * FE57_C0_D001_Q216[0][0][j];
        const double fw102 = sv216[401] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP102[j] += fw102 * FE57_C0_D001_Q216[0][0][j];
        const double fw103 = sv216[407] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP103[j] += fw103 * FE57_C0_D001_Q216[0][0][j];
        const double fw104 = sv216[413] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP104[j] += fw104 * FE57_C0_D001_Q216[0][0][j];
        const double fw105 = sv216[416] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP105[j] += fw105 * FE57_C0_D001_Q216[0][0][j];
        const double fw106 = sv216[422] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP106[j] += fw106 * FE57_C0_D001_Q216[0][0][j];
        const double fw107 = sv216[428] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP107[j] += fw107 * FE57_C0_D001_Q216[0][0][j];
        const double fw108 = sv216[434] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP108[j] += fw108 * FE57_C0_D001_Q216[0][0][j];
        const double fw109 = sv216[440] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP109[j] += fw109 * FE57_C0_D001_Q216[0][0][j];
        const double fw110 = sv216[446] * weights216[iq];
        for (int j = 0; j < 2; ++j)
            TP110[j] += fw110 * FE57_C0_D001_Q216[0][0][j];
    }
    A[0] = 0.0166666666666667 * sp[488];
    A[1] = 0.008333333333333345 * sp[488];
    A[2] = 0.008333333333333342 * sp[488];
    A[3] = 0.008333333333333335 * sp[488];
    A[4] = 0.1666666666666669 * sp[536] + 0.1666666666666669 * sp[542] + 0.1666666666666669 * sp[548] + 0.0166666666666667 * sp[489] + 0.1666666666666669 * sp[537] + 0.1666666666666669 * sp[543] + 0.1666666666666669 * sp[549] + 0.1666666666666669 * sp[538] + 0.1666666666666669 * sp[544] + 0.1666666666666669 * sp[550];
    A[5] = -0.1666666666666669 * sp[536] + 0.008333333333333345 * sp[489] + -0.1666666666666669 * sp[537] + -0.1666666666666669 * sp[538];
    A[6] = -0.1666666666666669 * sp[542] + 0.008333333333333342 * sp[489] + -0.1666666666666669 * sp[543] + -0.1666666666666669 * sp[544];
    A[7] = -0.1666666666666669 * sp[548] + 0.008333333333333335 * sp[489] + -0.1666666666666669 * sp[549] + -0.1666666666666669 * sp[550];
    A[8] = 0.1666666666666669 * sp[554] + 0.1666666666666669 * sp[560] + 0.1666666666666669 * sp[566] + 0.0166666666666667 * sp[490] + 0.1666666666666669 * sp[555] + 0.1666666666666669 * sp[561] + 0.1666666666666669 * sp[567] + 0.1666666666666669 * sp[556] + 0.1666666666666669 * sp[562] + 0.1666666666666669 * sp[568];
    A[9] = -0.1666666666666669 * sp[554] + 0.008333333333333345 * sp[490] + -0.1666666666666669 * sp[555] + -0.1666666666666669 * sp[556];
    A[10] = -0.1666666666666669 * sp[560] + 0.008333333333333342 * sp[490] + -0.1666666666666669 * sp[561] + -0.1666666666666669 * sp[562];
    A[11] = -0.1666666666666669 * sp[566] + 0.008333333333333335 * sp[490] + -0.1666666666666669 * sp[567] + -0.1666666666666669 * sp[568];
    A[12] = -0.0416666666666667 * sp[485] + -0.0416666666666667 * sp[486] + -0.0416666666666667 * sp[487];
    A[13] = 0.0416666666666667 * sp[485];
    A[14] = 0.0416666666666667 * sp[486];
    A[15] = 0.0416666666666667 * sp[487];
    A[16] = 0.008333333333333345 * sp[488];
    A[17] = 0.01666666666666669 * sp[488];
    A[18] = 0.008333333333333342 * sp[488];
    A[19] = 0.008333333333333338 * sp[488];
    A[20] = -0.1666666666666669 * sp[536] + -0.1666666666666669 * sp[542] + -0.1666666666666669 * sp[548] + 0.008333333333333345 * sp[489];
    A[21] = 0.1666666666666669 * sp[536] + 0.01666666666666669 * sp[489];
    A[22] = 0.1666666666666669 * sp[542] + 0.008333333333333342 * sp[489];
    A[23] = 0.1666666666666669 * sp[548] + 0.008333333333333338 * sp[489];
    A[24] = -0.1666666666666669 * sp[554] + -0.1666666666666669 * sp[560] + -0.1666666666666669 * sp[566] + 0.008333333333333345 * sp[490];
    A[25] = 0.1666666666666669 * sp[554] + 0.01666666666666669 * sp[490];
    A[26] = 0.1666666666666669 * sp[560] + 0.008333333333333342 * sp[490];
    A[27] = 0.1666666666666669 * sp[566] + 0.008333333333333338 * sp[490];
    A[28] = -0.04166666666666675 * sp[485] + -0.04166666666666675 * sp[486] + -0.04166666666666675 * sp[487];
    A[29] = 0.04166666666666675 * sp[485];
    A[30] = 0.04166666666666675 * sp[486];
    A[31] = 0.04166666666666675 * sp[487];
    A[32] = 0.008333333333333342 * sp[488];
    A[33] = 0.008333333333333342 * sp[488];
    A[34] = 0.01666666666666668 * sp[488];
    A[35] = 0.00833333333333334 * sp[488];
    A[36] = 0.008333333333333342 * sp[489] + -0.1666666666666669 * sp[537] + -0.1666666666666669 * sp[543] + -0.1666666666666669 * sp[549];
    A[37] = 0.008333333333333342 * sp[489] + 0.1666666666666669 * sp[537];
    A[38] = 0.01666666666666668 * sp[489] + 0.1666666666666669 * sp[543];
    A[39] = 0.00833333333333334 * sp[489] + 0.1666666666666669 * sp[549];
    A[40] = 0.008333333333333342 * sp[490] + -0.1666666666666669 * sp[555] + -0.1666666666666669 * sp[561] + -0.1666666666666669 * sp[567];
    A[41] = 0.008333333333333342 * sp[490] + 0.1666666666666669 * sp[555];
    A[42] = 0.01666666666666668 * sp[490] + 0.1666666666666669 * sp[561];
    A[43] = 0.00833333333333334 * sp[490] + 0.1666666666666669 * sp[567];
    A[44] = -0.04166666666666671 * sp[485] + -0.04166666666666671 * sp[486] + -0.04166666666666671 * sp[487];
    A[45] = 0.04166666666666671 * sp[485];
    A[46] = 0.04166666666666671 * sp[486];
    A[47] = 0.04166666666666671 * sp[487];
    A[48] = 0.008333333333333335 * sp[488];
    A[49] = 0.008333333333333338 * sp[488];
    A[50] = 0.00833333333333334 * sp[488];
    A[51] = 0.01666666666666669 * sp[488];
    A[52] = 0.008333333333333335 * sp[489] + -0.1666666666666669 * sp[538] + -0.1666666666666669 * sp[544] + -0.1666666666666669 * sp[550];
    A[53] = 0.008333333333333338 * sp[489] + 0.1666666666666669 * sp[538];
    A[54] = 0.00833333333333334 * sp[489] + 0.1666666666666669 * sp[544];
    A[55] = 0.01666666666666669 * sp[489] + 0.1666666666666669 * sp[550];
    A[56] = 0.008333333333333335 * sp[490] + -0.1666666666666669 * sp[556] + -0.1666666666666669 * sp[562] + -0.1666666666666669 * sp[568];
    A[57] = 0.008333333333333338 * sp[490] + 0.1666666666666669 * sp[556];
    A[58] = 0.00833333333333334 * sp[490] + 0.1666666666666669 * sp[562];
    A[59] = 0.01666666666666669 * sp[490] + 0.1666666666666669 * sp[568];
    A[60] = -0.04166666666666673 * sp[485] + -0.04166666666666673 * sp[486] + -0.04166666666666673 * sp[487];
    A[61] = 0.04166666666666673 * sp[485];
    A[62] = 0.04166666666666673 * sp[486];
    A[63] = 0.04166666666666673 * sp[487];
    A[64] = 0.1666666666666669 * sp[518] + 0.1666666666666669 * sp[524] + 0.1666666666666669 * sp[530] + 0.0166666666666667 * sp[503] + 0.1666666666666669 * sp[519] + 0.1666666666666669 * sp[525] + 0.1666666666666669 * sp[531] + 0.1666666666666669 * sp[520] + 0.1666666666666669 * sp[526] + 0.1666666666666669 * sp[532];
    A[65] = -0.1666666666666669 * sp[518] + 0.008333333333333345 * sp[503] + -0.1666666666666669 * sp[519] + -0.1666666666666669 * sp[520];
    A[66] = -0.1666666666666669 * sp[524] + 0.008333333333333342 * sp[503] + -0.1666666666666669 * sp[525] + -0.1666666666666669 * sp[526];
    A[67] = -0.1666666666666669 * sp[530] + 0.008333333333333335 * sp[503] + -0.1666666666666669 * sp[531] + -0.1666666666666669 * sp[532];
    A[68] = 0.0166666666666667 * sp[504];
    A[69] = 0.008333333333333345 * sp[504];
    A[70] = 0.008333333333333342 * sp[504];
    A[71] = 0.008333333333333335 * sp[504];
    A[72] = 0.1666666666666669 * sp[557] + 0.1666666666666669 * sp[563] + 0.1666666666666669 * sp[569] + 0.0166666666666667 * sp[505] + 0.1666666666666669 * sp[558] + 0.1666666666666669 * sp[564] + 0.1666666666666669 * sp[570] + 0.1666666666666669 * sp[559] + 0.1666666666666669 * sp[565] + 0.1666666666666669 * sp[571];
    A[73] = -0.1666666666666669 * sp[557] + 0.008333333333333345 * sp[505] + -0.1666666666666669 * sp[558] + -0.1666666666666669 * sp[559];
    A[74] = -0.1666666666666669 * sp[563] + 0.008333333333333342 * sp[505] + -0.1666666666666669 * sp[564] + -0.1666666666666669 * sp[565];
    A[75] = -0.1666666666666669 * sp[569] + 0.008333333333333335 * sp[505] + -0.1666666666666669 * sp[570] + -0.1666666666666669 * sp[571];
    A[76] = -0.0416666666666667 * sp[491] + -0.0416666666666667 * sp[496] + -0.0416666666666667 * sp[500];
    A[77] = 0.0416666666666667 * sp[491];
    A[78] = 0.0416666666666667 * sp[496];
    A[79] = 0.0416666666666667 * sp[500];
    A[80] = -0.1666666666666669 * sp[518] + -0.1666666666666669 * sp[524] + -0.1666666666666669 * sp[530] + 0.008333333333333345 * sp[503];
    A[81] = 0.1666666666666669 * sp[518] + 0.01666666666666669 * sp[503];
    A[82] = 0.1666666666666669 * sp[524] + 0.008333333333333342 * sp[503];
    A[83] = 0.1666666666666669 * sp[530] + 0.008333333333333338 * sp[503];
    A[84] = 0.008333333333333345 * sp[504];
    A[85] = 0.01666666666666669 * sp[504];
    A[86] = 0.008333333333333342 * sp[504];
    A[87] = 0.008333333333333338 * sp[504];
    A[88] = -0.1666666666666669 * sp[557] + -0.1666666666666669 * sp[563] + -0.1666666666666669 * sp[569] + 0.008333333333333345 * sp[505];
    A[89] = 0.1666666666666669 * sp[557] + 0.01666666666666669 * sp[505];
    A[90] = 0.1666666666666669 * sp[563] + 0.008333333333333342 * sp[505];
    A[91] = 0.1666666666666669 * sp[569] + 0.008333333333333338 * sp[505];
    A[92] = -0.04166666666666675 * sp[491] + -0.04166666666666675 * sp[496] + -0.04166666666666675 * sp[500];
    A[93] = 0.04166666666666675 * sp[491];
    A[94] = 0.04166666666666675 * sp[496];
    A[95] = 0.04166666666666675 * sp[500];
    A[96] = 0.008333333333333342 * sp[503] + -0.1666666666666669 * sp[519] + -0.1666666666666669 * sp[525] + -0.1666666666666669 * sp[531];
    A[97] = 0.008333333333333342 * sp[503] + 0.1666666666666669 * sp[519];
    A[98] = 0.01666666666666668 * sp[503] + 0.1666666666666669 * sp[525];
    A[99] = 0.00833333333333334 * sp[503] + 0.1666666666666669 * sp[531];
    A[100] = 0.008333333333333342 * sp[504];
    A[101] = 0.008333333333333342 * sp[504];
    A[102] = 0.01666666666666668 * sp[504];
    A[103] = 0.00833333333333334 * sp[504];
    A[104] = 0.008333333333333342 * sp[505] + -0.1666666666666669 * sp[558] + -0.1666666666666669 * sp[564] + -0.1666666666666669 * sp[570];
    A[105] = 0.008333333333333342 * sp[505] + 0.1666666666666669 * sp[558];
    A[106] = 0.01666666666666668 * sp[505] + 0.1666666666666669 * sp[564];
    A[107] = 0.00833333333333334 * sp[505] + 0.1666666666666669 * sp[570];
    A[108] = -0.04166666666666671 * sp[491] + -0.04166666666666671 * sp[496] + -0.04166666666666671 * sp[500];
    A[109] = 0.04166666666666671 * sp[491];
    A[110] = 0.04166666666666671 * sp[496];
    A[111] = 0.04166666666666671 * sp[500];
    A[112] = 0.008333333333333335 * sp[503] + -0.1666666666666669 * sp[520] + -0.1666666666666669 * sp[526] + -0.1666666666666669 * sp[532];
    A[113] = 0.008333333333333338 * sp[503] + 0.1666666666666669 * sp[520];
    A[114] = 0.00833333333333334 * sp[503] + 0.1666666666666669 * sp[526];
    A[115] = 0.01666666666666669 * sp[503] + 0.1666666666666669 * sp[532];
    A[116] = 0.008333333333333335 * sp[504];
    A[117] = 0.008333333333333338 * sp[504];
    A[118] = 0.00833333333333334 * sp[504];
    A[119] = 0.01666666666666669 * sp[504];
    A[120] = 0.008333333333333335 * sp[505] + -0.1666666666666669 * sp[559] + -0.1666666666666669 * sp[565] + -0.1666666666666669 * sp[571];
    A[121] = 0.008333333333333338 * sp[505] + 0.1666666666666669 * sp[559];
    A[122] = 0.00833333333333334 * sp[505] + 0.1666666666666669 * sp[565];
    A[123] = 0.01666666666666669 * sp[505] + 0.1666666666666669 * sp[571];
    A[124] = -0.04166666666666673 * sp[491] + -0.04166666666666673 * sp[496] + -0.04166666666666673 * sp[500];
    A[125] = 0.04166666666666673 * sp[491];
    A[126] = 0.04166666666666673 * sp[496];
    A[127] = 0.04166666666666673 * sp[500];
    A[128] = 0.1666666666666669 * sp[521] + 0.1666666666666669 * sp[527] + 0.1666666666666669 * sp[533] + 0.0166666666666667 * sp[506] + 0.1666666666666669 * sp[522] + 0.1666666666666669 * sp[528] + 0.1666666666666669 * sp[534] + 0.1666666666666669 * sp[523] + 0.1666666666666669 * sp[529] + 0.1666666666666669 * sp[535];
    A[129] = -0.1666666666666669 * sp[521] + 0.008333333333333345 * sp[506] + -0.1666666666666669 * sp[522] + -0.1666666666666669 * sp[523];
    A[130] = -0.1666666666666669 * sp[527] + 0.008333333333333342 * sp[506] + -0.1666666666666669 * sp[528] + -0.1666666666666669 * sp[529];
    A[131] = -0.1666666666666669 * sp[533] + 0.008333333333333335 * sp[506] + -0.1666666666666669 * sp[534] + -0.1666666666666669 * sp[535];
    A[132] = 0.1666666666666669 * sp[539] + 0.1666666666666669 * sp[545] + 0.1666666666666669 * sp[551] + 0.0166666666666667 * sp[507] + 0.1666666666666669 * sp[540] + 0.1666666666666669 * sp[546] + 0.1666666666666669 * sp[552] + 0.1666666666666669 * sp[541] + 0.1666666666666669 * sp[547] + 0.1666666666666669 * sp[553];
    A[133] = -0.1666666666666669 * sp[539] + 0.008333333333333345 * sp[507] + -0.1666666666666669 * sp[540] + -0.1666666666666669 * sp[541];
    A[134] = -0.1666666666666669 * sp[545] + 0.008333333333333342 * sp[507] + -0.1666666666666669 * sp[546] + -0.1666666666666669 * sp[547];
    A[135] = -0.1666666666666669 * sp[551] + 0.008333333333333335 * sp[507] + -0.1666666666666669 * sp[552] + -0.1666666666666669 * sp[553];
    A[136] = 0.0166666666666667 * sp[508];
    A[137] = 0.008333333333333345 * sp[508];
    A[138] = 0.008333333333333342 * sp[508];
    A[139] = 0.008333333333333335 * sp[508];
    A[140] = -0.0416666666666667 * sp[492] + -0.0416666666666667 * sp[497] + -0.0416666666666667 * sp[501];
    A[141] = 0.0416666666666667 * sp[492];
    A[142] = 0.0416666666666667 * sp[497];
    A[143] = 0.0416666666666667 * sp[501];
    A[144] = -0.1666666666666669 * sp[521] + -0.1666666666666669 * sp[527] + -0.1666666666666669 * sp[533] + 0.008333333333333345 * sp[506];
    A[145] = 0.1666666666666669 * sp[521] + 0.01666666666666669 * sp[506];
    A[146] = 0.1666666666666669 * sp[527] + 0.008333333333333342 * sp[506];
    A[147] = 0.1666666666666669 * sp[533] + 0.008333333333333338 * sp[506];
    A[148] = -0.1666666666666669 * sp[539] + -0.1666666666666669 * sp[545] + -0.1666666666666669 * sp[551] + 0.008333333333333345 * sp[507];
    A[149] = 0.1666666666666669 * sp[539] + 0.01666666666666669 * sp[507];
    A[150] = 0.1666666666666669 * sp[545] + 0.008333333333333342 * sp[507];
    A[151] = 0.1666666666666669 * sp[551] + 0.008333333333333338 * sp[507];
    A[152] = 0.008333333333333345 * sp[508];
    A[153] = 0.01666666666666669 * sp[508];
    A[154] = 0.008333333333333342 * sp[508];
    A[155] = 0.008333333333333338 * sp[508];
    A[156] = -0.04166666666666675 * sp[492] + -0.04166666666666675 * sp[497] + -0.04166666666666675 * sp[501];
    A[157] = 0.04166666666666675 * sp[492];
    A[158] = 0.04166666666666675 * sp[497];
    A[159] = 0.04166666666666675 * sp[501];
    A[160] = 0.008333333333333342 * sp[506] + -0.1666666666666669 * sp[522] + -0.1666666666666669 * sp[528] + -0.1666666666666669 * sp[534];
    A[161] = 0.008333333333333342 * sp[506] + 0.1666666666666669 * sp[522];
    A[162] = 0.01666666666666668 * sp[506] + 0.1666666666666669 * sp[528];
    A[163] = 0.00833333333333334 * sp[506] + 0.1666666666666669 * sp[534];
    A[164] = 0.008333333333333342 * sp[507] + -0.1666666666666669 * sp[540] + -0.1666666666666669 * sp[546] + -0.1666666666666669 * sp[552];
    A[165] = 0.008333333333333342 * sp[507] + 0.1666666666666669 * sp[540];
    A[166] = 0.01666666666666668 * sp[507] + 0.1666666666666669 * sp[546];
    A[167] = 0.00833333333333334 * sp[507] + 0.1666666666666669 * sp[552];
    A[168] = 0.008333333333333342 * sp[508];
    A[169] = 0.008333333333333342 * sp[508];
    A[170] = 0.01666666666666668 * sp[508];
    A[171] = 0.00833333333333334 * sp[508];
    A[172] = -0.04166666666666671 * sp[492] + -0.04166666666666671 * sp[497] + -0.04166666666666671 * sp[501];
    A[173] = 0.04166666666666671 * sp[492];
    A[174] = 0.04166666666666671 * sp[497];
    A[175] = 0.04166666666666671 * sp[501];
    A[176] = 0.008333333333333335 * sp[506] + -0.1666666666666669 * sp[523] + -0.1666666666666669 * sp[529] + -0.1666666666666669 * sp[535];
    A[177] = 0.008333333333333338 * sp[506] + 0.1666666666666669 * sp[523];
    A[178] = 0.00833333333333334 * sp[506] + 0.1666666666666669 * sp[529];
    A[179] = 0.01666666666666669 * sp[506] + 0.1666666666666669 * sp[535];
    A[180] = 0.008333333333333335 * sp[507] + -0.1666666666666669 * sp[541] + -0.1666666666666669 * sp[547] + -0.1666666666666669 * sp[553];
    A[181] = 0.008333333333333338 * sp[507] + 0.1666666666666669 * sp[541];
    A[182] = 0.00833333333333334 * sp[507] + 0.1666666666666669 * sp[547];
    A[183] = 0.01666666666666669 * sp[507] + 0.1666666666666669 * sp[553];
    A[184] = 0.008333333333333335 * sp[508];
    A[185] = 0.008333333333333338 * sp[508];
    A[186] = 0.00833333333333334 * sp[508];
    A[187] = 0.01666666666666669 * sp[508];
    A[188] = -0.04166666666666673 * sp[492] + -0.04166666666666673 * sp[497] + -0.04166666666666673 * sp[501];
    A[189] = 0.04166666666666673 * sp[492];
    A[190] = 0.04166666666666673 * sp[497];
    A[191] = 0.04166666666666673 * sp[501];
    A[192] = -0.0416666666666667 * sp[572] + -0.0416666666666667 * sp[509] + -0.0416666666666667 * sp[510] + -0.0416666666666667 * sp[511] + -0.0416666666666667 * sp[575] + -0.0416666666666667 * sp[578];
    A[193] = -0.04166666666666675 * sp[572] + 0.0416666666666667 * sp[509] + -0.04166666666666675 * sp[575] + -0.04166666666666675 * sp[578];
    A[194] = -0.04166666666666671 * sp[572] + 0.0416666666666667 * sp[510] + -0.04166666666666671 * sp[575] + -0.04166666666666671 * sp[578];
    A[195] = -0.04166666666666673 * sp[572] + 0.0416666666666667 * sp[511] + -0.04166666666666673 * sp[575] + -0.04166666666666673 * sp[578];
    A[196] = -0.0416666666666667 * sp[573] + -0.0416666666666667 * sp[512] + -0.0416666666666667 * sp[513] + -0.0416666666666667 * sp[514] + -0.0416666666666667 * sp[576] + -0.0416666666666667 * sp[579];
    A[197] = -0.04166666666666675 * sp[573] + 0.0416666666666667 * sp[512] + -0.04166666666666675 * sp[576] + -0.04166666666666675 * sp[579];
    A[198] = -0.04166666666666671 * sp[573] + 0.0416666666666667 * sp[513] + -0.04166666666666671 * sp[576] + -0.04166666666666671 * sp[579];
    A[199] = -0.04166666666666673 * sp[573] + 0.0416666666666667 * sp[514] + -0.04166666666666673 * sp[576] + -0.04166666666666673 * sp[579];
    A[200] = -0.0416666666666667 * sp[574] + -0.0416666666666667 * sp[515] + -0.0416666666666667 * sp[516] + -0.0416666666666667 * sp[517] + -0.0416666666666667 * sp[577] + -0.0416666666666667 * sp[580];
    A[201] = -0.04166666666666675 * sp[574] + 0.0416666666666667 * sp[515] + -0.04166666666666675 * sp[577] + -0.04166666666666675 * sp[580];
    A[202] = -0.04166666666666671 * sp[574] + 0.0416666666666667 * sp[516] + -0.04166666666666671 * sp[577] + -0.04166666666666671 * sp[580];
    A[203] = -0.04166666666666673 * sp[574] + 0.0416666666666667 * sp[517] + -0.04166666666666673 * sp[577] + -0.04166666666666673 * sp[580];
    A[204] = 0.1666666666666669 * sp[493] + 0.1666666666666669 * sp[494] + 0.1666666666666669 * sp[495] + 0.1666666666666669 * sp[494] + 0.1666666666666669 * sp[498] + 0.1666666666666669 * sp[499] + 0.1666666666666669 * sp[495] + 0.1666666666666669 * sp[499] + 0.1666666666666669 * sp[502];
    A[205] = -0.1666666666666669 * sp[493] + -0.1666666666666669 * sp[494] + -0.1666666666666669 * sp[495];
    A[206] = -0.1666666666666669 * sp[494] + -0.1666666666666669 * sp[498] + -0.1666666666666669 * sp[499];
    A[207] = -0.1666666666666669 * sp[495] + -0.1666666666666669 * sp[499] + -0.1666666666666669 * sp[502];
    A[208] = 0.0416666666666667 * sp[572] + -0.04166666666666675 * sp[509] + -0.04166666666666675 * sp[510] + -0.04166666666666675 * sp[511];
    A[209] = 0.04166666666666675 * sp[572] + 0.04166666666666675 * sp[509];
    A[210] = 0.04166666666666671 * sp[572] + 0.04166666666666675 * sp[510];
    A[211] = 0.04166666666666673 * sp[572] + 0.04166666666666675 * sp[511];
    A[212] = 0.0416666666666667 * sp[573] + -0.04166666666666675 * sp[512] + -0.04166666666666675 * sp[513] + -0.04166666666666675 * sp[514];
    A[213] = 0.04166666666666675 * sp[573] + 0.04166666666666675 * sp[512];
    A[214] = 0.04166666666666671 * sp[573] + 0.04166666666666675 * sp[513];
    A[215] = 0.04166666666666673 * sp[573] + 0.04166666666666675 * sp[514];
    A[216] = 0.0416666666666667 * sp[574] + -0.04166666666666675 * sp[515] + -0.04166666666666675 * sp[516] + -0.04166666666666675 * sp[517];
    A[217] = 0.04166666666666675 * sp[574] + 0.04166666666666675 * sp[515];
    A[218] = 0.04166666666666671 * sp[574] + 0.04166666666666675 * sp[516];
    A[219] = 0.04166666666666673 * sp[574] + 0.04166666666666675 * sp[517];
    A[220] = -0.1666666666666669 * sp[493] + -0.1666666666666669 * sp[494] + -0.1666666666666669 * sp[495];
    A[221] = 0.1666666666666669 * sp[493];
    A[222] = 0.1666666666666669 * sp[494];
    A[223] = 0.1666666666666669 * sp[495];
    A[224] = -0.04166666666666671 * sp[509] + -0.04166666666666671 * sp[510] + -0.04166666666666671 * sp[511] + 0.0416666666666667 * sp[575];
    A[225] = 0.04166666666666671 * sp[509] + 0.04166666666666675 * sp[575];
    A[226] = 0.04166666666666671 * sp[510] + 0.04166666666666671 * sp[575];
    A[227] = 0.04166666666666671 * sp[511] + 0.04166666666666673 * sp[575];
    A[228] = -0.04166666666666671 * sp[512] + -0.04166666666666671 * sp[513] + -0.04166666666666671 * sp[514] + 0.0416666666666667 * sp[576];
    A[229] = 0.04166666666666671 * sp[512] + 0.04166666666666675 * sp[576];
    A[230] = 0.04166666666666671 * sp[513] + 0.04166666666666671 * sp[576];
    A[231] = 0.04166666666666671 * sp[514] + 0.04166666666666673 * sp[576];
    A[232] = -0.04166666666666671 * sp[515] + -0.04166666666666671 * sp[516] + -0.04166666666666671 * sp[517] + 0.0416666666666667 * sp[577];
    A[233] = 0.04166666666666671 * sp[515] + 0.04166666666666675 * sp[577];
    A[234] = 0.04166666666666671 * sp[516] + 0.04166666666666671 * sp[577];
    A[235] = 0.04166666666666671 * sp[517] + 0.04166666666666673 * sp[577];
    A[236] = -0.1666666666666669 * sp[494] + -0.1666666666666669 * sp[498] + -0.1666666666666669 * sp[499];
    A[237] = 0.1666666666666669 * sp[494];
    A[238] = 0.1666666666666669 * sp[498];
    A[239] = 0.1666666666666669 * sp[499];
    A[240] = -0.04166666666666673 * sp[509] + -0.04166666666666673 * sp[510] + -0.04166666666666673 * sp[511] + 0.0416666666666667 * sp[578];
    A[241] = 0.04166666666666673 * sp[509] + 0.04166666666666675 * sp[578];
    A[242] = 0.04166666666666673 * sp[510] + 0.04166666666666671 * sp[578];
    A[243] = 0.04166666666666673 * sp[511] + 0.04166666666666673 * sp[578];
    A[244] = -0.04166666666666673 * sp[512] + -0.04166666666666673 * sp[513] + -0.04166666666666673 * sp[514] + 0.0416666666666667 * sp[579];
    A[245] = 0.04166666666666673 * sp[512] + 0.04166666666666675 * sp[579];
    A[246] = 0.04166666666666673 * sp[513] + 0.04166666666666671 * sp[579];
    A[247] = 0.04166666666666673 * sp[514] + 0.04166666666666673 * sp[579];
    A[248] = -0.04166666666666673 * sp[515] + -0.04166666666666673 * sp[516] + -0.04166666666666673 * sp[517] + 0.0416666666666667 * sp[580];
    A[249] = 0.04166666666666673 * sp[515] + 0.04166666666666675 * sp[580];
    A[250] = 0.04166666666666673 * sp[516] + 0.04166666666666671 * sp[580];
    A[251] = 0.04166666666666673 * sp[517] + 0.04166666666666673 * sp[580];
    A[252] = -0.1666666666666669 * sp[495] + -0.1666666666666669 * sp[499] + -0.1666666666666669 * sp[502];
    A[253] = 0.1666666666666669 * sp[495];
    A[254] = 0.1666666666666669 * sp[499];
    A[255] = 0.1666666666666669 * sp[502];
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 12, 14 };
    static const int DM3[2] = { 12, 15 };
    static const int DM4[2] = { 4, 6 };
    static const int DM5[2] = { 4, 7 };
    static const int DM6[2] = { 8, 10 };
    static const int DM7[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + j] += FE57_C0_D001_Q216[0][0][i] * TP0[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * i + j] += FE57_C0_D001_Q216[0][0][i] * TP1[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM0[j]] += FE57_C0_D001_Q216[0][0][i] * TP2[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM1[j]] += FE57_C0_D001_Q216[0][0][i] * TP3[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * i + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP4[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * i + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP5[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + (j + 12)] += FE57_C0_D001_Q216[0][0][i] * TP6[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM2[j]] += FE57_C0_D001_Q216[0][0][i] * TP7[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM3[j]] += FE57_C0_D001_Q216[0][0][i] * TP8[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + j] += FE57_C0_D001_Q216[0][0][j] * TP9[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM0[j]] += FE57_C0_D001_Q216[0][0][j] * TP10[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * i + DM1[j]] += FE57_C0_D001_Q216[0][0][j] * TP11[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + j] += FE57_C0_D001_Q216[0][0][i] * TP12[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM0[i] + j] += FE57_C0_D001_Q216[0][0][i] * TP13[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM0[j]] += FE57_C0_D001_Q216[0][0][i] * TP14[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM1[j]] += FE57_C0_D001_Q216[0][0][i] * TP15[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM0[i] + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP16[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM0[i] + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP17[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + (j + 12)] += FE57_C0_D001_Q216[0][0][i] * TP18[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM2[j]] += FE57_C0_D001_Q216[0][0][i] * TP19[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM0[i] + DM3[j]] += FE57_C0_D001_Q216[0][0][i] * TP20[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + j] += FE57_C0_D001_Q216[0][0][i] * TP21[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM1[i] + j] += FE57_C0_D001_Q216[0][0][i] * TP22[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM0[j]] += FE57_C0_D001_Q216[0][0][i] * TP23[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM1[j]] += FE57_C0_D001_Q216[0][0][i] * TP24[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM1[i] + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP25[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM1[i] + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP26[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + (j + 12)] += FE57_C0_D001_Q216[0][0][i] * TP27[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM2[j]] += FE57_C0_D001_Q216[0][0][i] * TP28[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM1[i] + DM3[j]] += FE57_C0_D001_Q216[0][0][i] * TP29[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * (i + 4) + j] += FE57_C0_D001_Q216[0][0][i] * TP30[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP31[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * (i + 4) + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP32[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM4[j]] += FE57_C0_D001_Q216[0][0][i] * TP33[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM5[j]] += FE57_C0_D001_Q216[0][0][i] * TP34[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * (i + 4) + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP35[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + (j + 12)] += FE57_C0_D001_Q216[0][0][i] * TP36[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM2[j]] += FE57_C0_D001_Q216[0][0][i] * TP37[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM3[j]] += FE57_C0_D001_Q216[0][0][i] * TP38[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + (j + 4)] += FE57_C0_D001_Q216[0][0][j] * TP9[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM4[j]] += FE57_C0_D001_Q216[0][0][j] * TP10[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 4) + DM5[j]] += FE57_C0_D001_Q216[0][0][j] * TP11[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM4[i] + j] += FE57_C0_D001_Q216[0][0][i] * TP39[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP40[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM4[i] + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP41[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM4[j]] += FE57_C0_D001_Q216[0][0][i] * TP42[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM5[j]] += FE57_C0_D001_Q216[0][0][i] * TP43[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM4[i] + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP44[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + (j + 12)] += FE57_C0_D001_Q216[0][0][i] * TP45[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM2[j]] += FE57_C0_D001_Q216[0][0][i] * TP46[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM4[i] + DM3[j]] += FE57_C0_D001_Q216[0][0][i] * TP47[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM5[i] + j] += FE57_C0_D001_Q216[0][0][i] * TP48[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP49[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM5[i] + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP50[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM4[j]] += FE57_C0_D001_Q216[0][0][i] * TP51[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM5[j]] += FE57_C0_D001_Q216[0][0][i] * TP52[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM5[i] + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP53[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + (j + 12)] += FE57_C0_D001_Q216[0][0][i] * TP54[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM2[j]] += FE57_C0_D001_Q216[0][0][i] * TP55[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM5[i] + DM3[j]] += FE57_C0_D001_Q216[0][0][i] * TP56[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * (i + 8) + j] += FE57_C0_D001_Q216[0][0][i] * TP57[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * (i + 8) + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP58[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP59[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * (i + 8) + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP60[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM6[j]] += FE57_C0_D001_Q216[0][0][i] * TP61[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM7[j]] += FE57_C0_D001_Q216[0][0][i] * TP62[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + (j + 12)] += FE57_C0_D001_Q216[0][0][i] * TP63[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM2[j]] += FE57_C0_D001_Q216[0][0][i] * TP64[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM3[j]] += FE57_C0_D001_Q216[0][0][i] * TP65[j];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + (j + 8)] += FE57_C0_D001_Q216[0][0][j] * TP9[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM6[j]] += FE57_C0_D001_Q216[0][0][j] * TP10[i];
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 8) + DM7[j]] += FE57_C0_D001_Q216[0][0][j] * TP11[i];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM6[i] + j] += FE57_C0_D001_Q216[0][0][i] * TP66[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM6[i] + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP67[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM6[i] + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP68[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM6[i] + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP69[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM6[i] + DM6[j]] += FE57_C0_D001_Q216[0][0][i] * TP70[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM6[i] + DM7[j]] += FE57_C0_D001_Q216[0][0][i] * TP71[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM6[i] + (j + 12)] += FE57_C0_D001_Q216[0][0][i] * TP72[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM6[i] + DM2[j]] += FE57_C0_D001_Q216[0][0][i] * TP73[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM6[i] + DM3[j]] += FE57_C0_D001_Q216[0][0][i] * TP74[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM7[i] + j] += FE57_C0_D001_Q216[0][0][i] * TP75[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM7[i] + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP76[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM7[i] + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP77[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 4; ++j)
            A[16 * DM7[i] + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP78[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM7[i] + DM6[j]] += FE57_C0_D001_Q216[0][0][i] * TP79[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM7[i] + DM7[j]] += FE57_C0_D001_Q216[0][0][i] * TP80[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM7[i] + (j + 12)] += FE57_C0_D001_Q216[0][0][i] * TP81[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM7[i] + DM2[j]] += FE57_C0_D001_Q216[0][0][i] * TP82[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM7[i] + DM3[j]] += FE57_C0_D001_Q216[0][0][i] * TP83[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 12) + j] += FE57_C0_D001_Q216[0][0][i] * TP84[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 12) + DM0[j]] += FE57_C0_D001_Q216[0][0][i] * TP85[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 12) + DM1[j]] += FE57_C0_D001_Q216[0][0][i] * TP86[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 12) + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP87[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 12) + DM4[j]] += FE57_C0_D001_Q216[0][0][i] * TP88[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 12) + DM5[j]] += FE57_C0_D001_Q216[0][0][i] * TP89[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 12) + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP90[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 12) + DM6[j]] += FE57_C0_D001_Q216[0][0][i] * TP91[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * (i + 12) + DM7[j]] += FE57_C0_D001_Q216[0][0][i] * TP92[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + j] += FE57_C0_D001_Q216[0][0][i] * TP93[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM0[j]] += FE57_C0_D001_Q216[0][0][i] * TP94[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM1[j]] += FE57_C0_D001_Q216[0][0][i] * TP95[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP96[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM4[j]] += FE57_C0_D001_Q216[0][0][i] * TP97[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM5[j]] += FE57_C0_D001_Q216[0][0][i] * TP98[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP99[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM6[j]] += FE57_C0_D001_Q216[0][0][i] * TP100[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM2[i] + DM7[j]] += FE57_C0_D001_Q216[0][0][i] * TP101[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + j] += FE57_C0_D001_Q216[0][0][i] * TP102[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM0[j]] += FE57_C0_D001_Q216[0][0][i] * TP103[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM1[j]] += FE57_C0_D001_Q216[0][0][i] * TP104[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + (j + 4)] += FE57_C0_D001_Q216[0][0][i] * TP105[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM4[j]] += FE57_C0_D001_Q216[0][0][i] * TP106[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM5[j]] += FE57_C0_D001_Q216[0][0][i] * TP107[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + (j + 8)] += FE57_C0_D001_Q216[0][0][i] * TP108[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM6[j]] += FE57_C0_D001_Q216[0][0][i] * TP109[j];
    for (int i = 0; i < 2; ++i)
        for (int j = 0; j < 2; ++j)
            A[16 * DM3[i] + DM7[j]] += FE57_C0_D001_Q216[0][0][i] * TP110[j];
  }

};


class nonlinearns_form_0: public ufc::form
{
public:

  nonlinearns_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~nonlinearns_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "92f388ad5a63e1886d3a0bb82af40b6a6cf9c67905ebf12f98bca8aa6f577d44ea1e03c8ce57c4b82abb4d5581043b1fdbb91f6f2d0f80fcd7cd82bbed67373e";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 6;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 6)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4, 5};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new nonlinearns_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new nonlinearns_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new nonlinearns_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new nonlinearns_finite_element_2();
    case 1:
        return new nonlinearns_finite_element_2();
    case 2:
        return new nonlinearns_finite_element_2();
    case 3:
        return new nonlinearns_finite_element_1();
    case 4:
        return new nonlinearns_finite_element_3();
    case 5:
        return new nonlinearns_finite_element_3();
    case 6:
        return new nonlinearns_finite_element_3();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new nonlinearns_dofmap_2();
    case 1:
        return new nonlinearns_dofmap_2();
    case 2:
        return new nonlinearns_dofmap_2();
    case 3:
        return new nonlinearns_dofmap_1();
    case 4:
        return new nonlinearns_dofmap_3();
    case 5:
        return new nonlinearns_dofmap_3();
    case 6:
        return new nonlinearns_dofmap_3();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new nonlinearns_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class nonlinearns_form_1: public ufc::form
{
public:

  nonlinearns_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~nonlinearns_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "e9ac851c761c710a954072d0898b5844cd41b933bb2849d129cfc86b0a335bb6a0606aa5f7a46da24daf5d459c96ef564e67e9e03bf9d9bd34f62af4d287bab6";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 6;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 6)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4, 5};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new nonlinearns_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new nonlinearns_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new nonlinearns_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new nonlinearns_finite_element_2();
    case 1:
        return new nonlinearns_finite_element_2();
    case 2:
        return new nonlinearns_finite_element_2();
    case 3:
        return new nonlinearns_finite_element_2();
    case 4:
        return new nonlinearns_finite_element_1();
    case 5:
        return new nonlinearns_finite_element_3();
    case 6:
        return new nonlinearns_finite_element_3();
    case 7:
        return new nonlinearns_finite_element_3();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new nonlinearns_dofmap_2();
    case 1:
        return new nonlinearns_dofmap_2();
    case 2:
        return new nonlinearns_dofmap_2();
    case 3:
        return new nonlinearns_dofmap_2();
    case 4:
        return new nonlinearns_dofmap_1();
    case 5:
        return new nonlinearns_dofmap_3();
    case 6:
        return new nonlinearns_dofmap_3();
    case 7:
        return new nonlinearns_dofmap_3();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new nonlinearns_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace NonlinearNS
{

class CoefficientSpace_f: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_f(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_f(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_k: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_nu: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_nu(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_nu(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_theta: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_theta(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_theta(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_w: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_w(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_w(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_w0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_w0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_w0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_w Form_F_FunctionSpace_1;

typedef CoefficientSpace_w0 Form_F_FunctionSpace_2;

typedef CoefficientSpace_f Form_F_FunctionSpace_3;

typedef CoefficientSpace_k Form_F_FunctionSpace_4;

typedef CoefficientSpace_nu Form_F_FunctionSpace_5;

typedef CoefficientSpace_theta Form_F_FunctionSpace_6;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 6), w(*this, 0), w0(*this, 1), f(*this, 2), k(*this, 3), nu(*this, 4), theta(*this, 5)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const nonlinearns_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> w, std::shared_ptr<const dolfin::GenericFunction> w0, std::shared_ptr<const dolfin::GenericFunction> f, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> nu, std::shared_ptr<const dolfin::GenericFunction> theta):
    dolfin::Form(1, 6), w(*this, 0), w0(*this, 1), f(*this, 2), k(*this, 3), nu(*this, 4), theta(*this, 5)
  {
    _function_spaces[0] = V0;

    this->w = w;
    this->w0 = w0;
    this->f = f;
    this->k = k;
    this->nu = nu;
    this->theta = theta;

    _ufc_form = std::make_shared<const nonlinearns_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w")
      return 0;
    else if (name == "w0")
      return 1;
    else if (name == "f")
      return 2;
    else if (name == "k")
      return 3;
    else if (name == "nu")
      return 4;
    else if (name == "theta")
      return 5;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w";
    case 1:
      return "w0";
    case 2:
      return "f";
    case 3:
      return "k";
    case 4:
      return "nu";
    case 5:
      return "theta";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_w;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_w0;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_f;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_k;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_nu;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_theta;

  // Coefficients
  dolfin::CoefficientAssigner w;
  dolfin::CoefficientAssigner w0;
  dolfin::CoefficientAssigner f;
  dolfin::CoefficientAssigner k;
  dolfin::CoefficientAssigner nu;
  dolfin::CoefficientAssigner theta;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), w(*this, 0), w0(*this, 1), f(*this, 2), k(*this, 3), nu(*this, 4), theta(*this, 5)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> w, std::shared_ptr<const dolfin::GenericFunction> w0, std::shared_ptr<const dolfin::GenericFunction> f, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> nu, std::shared_ptr<const dolfin::GenericFunction> theta):
    dolfin::MultiMeshForm(V0), w(*this, 0), w0(*this, 1), f(*this, 2), k(*this, 3), nu(*this, 4), theta(*this, 5)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->w = w;
    this->w0 = w0;
    this->f = f;
    this->k = k;
    this->nu = nu;
    this->theta = theta;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w")
      return 0;
    else if (name == "w0")
      return 1;
    else if (name == "f")
      return 2;
    else if (name == "k")
      return 3;
    else if (name == "nu")
      return 4;
    else if (name == "theta")
      return 5;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w";
    case 1:
      return "w0";
    case 2:
      return "f";
    case 3:
      return "k";
    case 4:
      return "nu";
    case 5:
      return "theta";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_w;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_w0;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_f;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_k;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_nu;
  typedef Form_F_FunctionSpace_6 CoefficientSpace_theta;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner w;
  dolfin::MultiMeshCoefficientAssigner w0;
  dolfin::MultiMeshCoefficientAssigner f;
  dolfin::MultiMeshCoefficientAssigner k;
  dolfin::MultiMeshCoefficientAssigner nu;
  dolfin::MultiMeshCoefficientAssigner theta;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<nonlinearns_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<nonlinearns_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_w Form_J_FunctionSpace_2;

typedef CoefficientSpace_w0 Form_J_FunctionSpace_3;

typedef CoefficientSpace_f Form_J_FunctionSpace_4;

typedef CoefficientSpace_k Form_J_FunctionSpace_5;

typedef CoefficientSpace_nu Form_J_FunctionSpace_6;

typedef CoefficientSpace_theta Form_J_FunctionSpace_7;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 6), w(*this, 0), w0(*this, 1), f(*this, 2), k(*this, 3), nu(*this, 4), theta(*this, 5)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const nonlinearns_form_1>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> w, std::shared_ptr<const dolfin::GenericFunction> w0, std::shared_ptr<const dolfin::GenericFunction> f, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> nu, std::shared_ptr<const dolfin::GenericFunction> theta):
    dolfin::Form(2, 6), w(*this, 0), w0(*this, 1), f(*this, 2), k(*this, 3), nu(*this, 4), theta(*this, 5)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->w = w;
    this->w0 = w0;
    this->f = f;
    this->k = k;
    this->nu = nu;
    this->theta = theta;

    _ufc_form = std::make_shared<const nonlinearns_form_1>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w")
      return 0;
    else if (name == "w0")
      return 1;
    else if (name == "f")
      return 2;
    else if (name == "k")
      return 3;
    else if (name == "nu")
      return 4;
    else if (name == "theta")
      return 5;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w";
    case 1:
      return "w0";
    case 2:
      return "f";
    case 3:
      return "k";
    case 4:
      return "nu";
    case 5:
      return "theta";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_w;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_w0;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_f;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_k;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_nu;
  typedef Form_J_FunctionSpace_7 CoefficientSpace_theta;

  // Coefficients
  dolfin::CoefficientAssigner w;
  dolfin::CoefficientAssigner w0;
  dolfin::CoefficientAssigner f;
  dolfin::CoefficientAssigner k;
  dolfin::CoefficientAssigner nu;
  dolfin::CoefficientAssigner theta;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), w(*this, 0), w0(*this, 1), f(*this, 2), k(*this, 3), nu(*this, 4), theta(*this, 5)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> w, std::shared_ptr<const dolfin::GenericFunction> w0, std::shared_ptr<const dolfin::GenericFunction> f, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> nu, std::shared_ptr<const dolfin::GenericFunction> theta):
    dolfin::MultiMeshForm(V1, V0), w(*this, 0), w0(*this, 1), f(*this, 2), k(*this, 3), nu(*this, 4), theta(*this, 5)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->w = w;
    this->w0 = w0;
    this->f = f;
    this->k = k;
    this->nu = nu;
    this->theta = theta;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w")
      return 0;
    else if (name == "w0")
      return 1;
    else if (name == "f")
      return 2;
    else if (name == "k")
      return 3;
    else if (name == "nu")
      return 4;
    else if (name == "theta")
      return 5;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w";
    case 1:
      return "w0";
    case 2:
      return "f";
    case 3:
      return "k";
    case 4:
      return "nu";
    case 5:
      return "theta";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_w;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_w0;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_f;
  typedef Form_J_FunctionSpace_5 CoefficientSpace_k;
  typedef Form_J_FunctionSpace_6 CoefficientSpace_nu;
  typedef Form_J_FunctionSpace_7 CoefficientSpace_theta;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner w;
  dolfin::MultiMeshCoefficientAssigner w0;
  dolfin::MultiMeshCoefficientAssigner f;
  dolfin::MultiMeshCoefficientAssigner k;
  dolfin::MultiMeshCoefficientAssigner nu;
  dolfin::MultiMeshCoefficientAssigner theta;
};

// Class typedefs
typedef Form_J BilinearForm;
typedef MultiMeshForm_J MultiMeshBilinearForm;
typedef Form_J JacobianForm;
typedef MultiMeshForm_J MultiMeshJacobianForm;
typedef Form_F LinearForm;
typedef MultiMeshForm_F MultiMeshLinearForm;
typedef Form_F ResidualForm;
typedef MultiMeshForm_F MultiMeshResidualForm;
typedef Form_F::TestSpace FunctionSpace;
typedef Form_F::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
